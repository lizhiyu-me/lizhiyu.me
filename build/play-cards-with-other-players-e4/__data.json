{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"title":2,"slug":3,"coverImage":4,"date":5,"excerpt":6,"tags":7,"html":9,"readingTime":10,"relatedPosts":11},"Make a multiplayer card game - Episode 4","play-cards-with-other-players-e4","\u002Fimages\u002Fposts\u002Fblog-posts.jpg","2021-03-01T21:55:15.361Z","Play cards with other players",[8],"Tutorial:Make a multiplayer card game","\u003Ch2 id=\"make-a-multiplayer-card-game---episode-4--play-cards-with-other-players\"\u003E\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-4--play-cards-with-other-players\"\u003E\u003Cspan\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003EMake a multiplayer card game - Episode 4 | Play cards with other players\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EThis section is a milestone in this series of tutorials, and after this\narticle, there will present a complete multiplayer local online card game.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\u003Cp\u003EThe key point of this section is how to link multiplayer to play.\u003C\u002Fp\u003E\n\u003Ch4 id=\"almost-all-changes-is-on-the-server-side\"\u003E\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#almost-all-changes-is-on-the-server-side\"\u003E\u003Cspan\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003EAlmost all changes is on the server side:\u003C\u002Fh4\u003E\n\u003Cp\u003EWe make a server and listen on ‚Äúconnection‚Äù event.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Econst net = require(&#39;net&#39;);\nconst server = net.createServer();\nserver.on(&quot;connection&quot;,()=&gt;&#123;&#125;);\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EThen we generate a player ID and seat number for the player connecting.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Evar playerIDArr = [];\nfunction generatePlayerIDAndSeatNumber() &#123;\n    let _seat = playerIDArr.length;\n    let _id = Math.floor(Math.random() * 10000);\n    let _isExist = playerIDArr.indexOf(_id) != -1;\n    if (_isExist) &#123;\n        generatePlayerIDAndSeatNumber();\n    &#125; else &#123;\n        playerIDArr.push(_id);\n    &#125;\n    return &#123; id: _id, seat: _seat &#125;;\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EBack to the ‚Äúconnection‚Äù event, we assign some attributes on socket to make a\nidentification.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-javascript\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-javascript\"\u003Eserver\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"connection\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Esocket\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E _id_seat \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EgeneratePlayerIDAndSeatNumber\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E _playerID \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E _id_seat\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eid\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E _seatNumber \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E _id_seat\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eseat\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  socket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eid \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E _playerID\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  socket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eseat \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E _seatNumber\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  socketDic\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E_playerID\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E socket\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"token function\"\u003EaddSocketListener\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esocket\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EAdd event listener to each socket, listen players‚Äô interaction information\nthrough data which cotain the command ID to route different game logic:\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Efunction addSocketListener(socket) &#123;\n    socket.on(&#39;data&#39;, (data) =&gt; &#123;\n        let _playerID = socket.id;\n        decodeData(data, _playerID);\n    &#125;);\n    socket.on(&#39;error&#39;, (error) =&gt; &#123;\n        \u002F\u002Fplayer disconnect\n        console.log(error);\n    &#125;);\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Ethe server forwards each player‚Äôs messages, which are divided into separate\nsending and broadcasting.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003E\u002F\u002Fsend to a specific player\nfunction send(playerID, cmd, data) &#123;\n    if (!mIsGaming) return;\n    const _dataBuffer = encodeData(cmd, data);\n    if (_dataBuffer) socketDic[playerID].write(_dataBuffer);\n&#125;\n\u002F\u002Fsend to all players\nfunction broadcast(cmd, data) &#123;\n    if (!mIsGaming) return;\n    const _dataBuffer = encodeData(cmd, data);\n    if (_dataBuffer) &#123;\n        let _keyArr = Object.keys(socketDic);\n        for (let i = 0; i &lt; _keyArr.length; i++) &#123;\n            let _socket = socketDic[_keyArr[i]];\n            _socket.write(_dataBuffer);\n        &#125;\n    &#125;\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EThat‚Äôs all the key points in this section, as above present, players can be\nconnect to a server and play with each other. You can check\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode4\" rel=\"nofollow\"\u003Eepisode4 tag\u003C\u002Fa\u003E\nto see the complete code.\u003C\u002Fp\u003E\n\u003Chr\u003E\n\u003Cp\u003EThe progress of the project up to this point have make a milestone, will not add\nnew content to the relevant repo main branch, excluding the subsequent\nrefactoring to prepare for the involvement of the game engine and framework.\u003C\u002Fp\u003E\n\u003Cp\u003EThe addition of new content will open another branch for development. Like each\nepisode, a tag will still be added after the chapter ends. You can find the\ncontent of the corresponding chapter through the corresponding tag at any time.\u003C\u002Fp\u003E\n\u003Cp\u003EIn order to reflect the simplicity of native nodejs, I chose javascript. But I\nhave been developing with typescript in the past few years, is not very familiar\nwith javascript, which I must spend a little bit more time on debugging.\u003C\u002Fp\u003E\n\u003Cp\u003EThe content of the following chapters will expand rapidly. For either the\nrobustness of development or my proficiency. I will use typescript for new\ncontent development and refactoring in later articles.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EThe next episode, as the content list in the first episode, I will add game\nengine Cocos Creator, before which I will make a refactory, besides move\njavascript to typescript, but something about modularity.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EThanks for your reading, and discussion is always welcome, I am very glad to\ntalk with you in below comment sectionüòä.\u003C\u002Fp\u003E","3 min read",[12,19,27],{"title":13,"slug":14,"coverImage":4,"date":15,"excerpt":16,"tags":17,"html":18,"readingTime":10},"Make a multiplayer card game - Episode 3","change-json-to-protocol-buffers-e3","2021-02-22T21:55:15.361Z","Change JSON to Protocol Buffers",[8],"\u003Ch2 id=\"make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers\"\u003E\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers\"\u003E\u003Cspan\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003EMake a multiplayer card game - Episode 3 | Change JSON to Protocol Buffers\u003C\u002Fh2\u003E\n\u003Cblockquote\u003E\u003Cp\u003EProtocol buffers are a language-neutral, platform-neutral extensible mechanism\nfor serializing structured data. It has many advantages such as ‚ÄúLesser in\nSize and Better in Performance‚Äù, like this article\n\u003Ca href=\"https:\u002F\u002Fanuragthakur.hashnode.dev\u002Fprotobuf-why-google-moved-from-json-to-protocol-buffers-ckdxb8sgi03kdjas17ril3fbi\" rel=\"nofollow\"\u003EWhy Google moved from JSON to Protocol Buffers?\u003C\u002Fa\u003E\nintroduce.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\u003Cp\u003EI used it on all the projects I‚Äôve worked on over the years. Besides the better\nperformance, what make me impressed is that the clean communication between\nclient and server with protocol buffers.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\u003Cp\u003EYou can clone\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode3\" rel=\"nofollow\"\u003Edemo for episode3\u003C\u002Fa\u003E\nwhich including all the bellow content.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\u003Cp\u003EAccording to the\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fprotocolbuffers\u002Fprotobuf\" rel=\"nofollow\"\u003Eofficial tutorial\u003C\u002Fa\u003E, two steps\nshould be done:\u003C\u002Fp\u003E\n\u003Col\u003E\u003Cli\u003EInstall the runtime library \u003Ccode\u003Egoogle-protobuf\u003C\u002Fcode\u003E:\u003Ccode\u003Enpm install\ngoogle-protobuf\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EGet the Protocol Compiler \u003Ccode\u003Eprotoc\u003C\u002Fcode\u003E: download from\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fprotocolbuffers\u002Fprotobuf\u002Freleases\" rel=\"nofollow\"\u003Ehttps:\u002F\u002Fgithub.com\u002Fprotocolbuffers\u002Fprotobuf\u002Freleases\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\n\u003Cp\u003EThen run a command like \u003Ccode\u003Eprotoc ‚Äîjs_out=import_style=commonjs,binary:.\nmessages.proto base.proto\u003C\u002Fcode\u003E, you can get the \u003Ccode\u003E.js\u003C\u002Fcode\u003E file from\u003C\u002Fp\u003E\n\u003Ccode\u003E.proto\u003C\u002Fcode\u003E.\n\u003Cp\u003EWhen the \u003Ccode\u003E.js\u003C\u002Fcode\u003E file generated, the protocol buffers environment is\nready.\u003C\u002Fp\u003E\n\u003Cp\u003EBack to our game, we should create a \u003Ccode\u003E.proto\u003C\u002Fcode\u003E file, named\u003C\u002Fp\u003E\n\u003Ccode\u003Ecard-game.proto\u003C\u002Fcode\u003E.\n\u003Cp\u003EThe first line in \u003Ccode\u003E.proto\u003C\u002Fcode\u003E file should be:\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Esyntax = &quot;proto3&quot;;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Ewhich means which version of Protobuf we are using.\u003C\u002Fp\u003E\n\u003Cp\u003EDefine the enum of Cmd:\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Eenum Cmd&#123;\n    NONE = 0;\n    READY_C2S = 1;\n    DEALCARDS_S2C = 2;\n    COMPETEFORLANDLORDROLE_C2S = 3;\n    PLAYTURN_S2C = 4;\n    PLAYCARDS_C2S = 5;\n    PLAYCARDS_S2C = 6;\n    ILLEGALCARDS_S2C = 7;\n    GAMEEND_S2C = 8;\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eenum Cmd is for routing, will be introduced later.\u003C\u002Fp\u003E\n\u003Cp\u003EDefine MainMessage message:\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Emessage MainMessage&#123;\n    uint32 cmd_id = 1;\n    bytes data =2;\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EIn order to encapsulate the header and data body, we should assign serialized\nmessage to the data attribute.\u003C\u002Fp\u003E\n\u003Cp\u003EDefine data message like:\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Emessage DealCards_S2C&#123;\n    repeated uint32 cards = 1;\n    uint32 seat_number = 2;\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EThen, generate our own \u003Ccode\u003E.js\u003C\u002Fcode\u003E file.\u003C\u002Fp\u003E\n\u003Cp\u003EAs the episode3 demo show, run command bellow in directory proto.\u003C\u002Fp\u003E\n\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EWindows\u003C\u002Fp\u003E\n\u003Ccode\u003E.\\protoc.exe --js_out=import_style=commonjs,binary:out\ncard-game.proto\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EMacOS\u003C\u002Fp\u003E\n\u003Ccode\u003E.\u002Fprotoc --js_out=import_style=commonjs,binary:out\ncard-game.proto\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\n\u003Cp\u003ENow, we have our own \u003Ccode\u003E.js\u003C\u002Fcode\u003E file from the \u003Ccode\u003E.proto\u003C\u002Fcode\u003E in which\nwe define message.\u003C\u002Fp\u003E\n\u003Cp\u003ELet‚Äôs encoding and decoding message with protocol buffers.\u003C\u002Fp\u003E\n\u003Cp\u003EEncoding: &gt;enum Cmd is used to map message type here\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Efunction encodeData(cmd, data) &#123;\n    let _proto_struct_obj;\n    switch (cmd) &#123;\n        case card_game_pb.Cmd.DEALCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.DealCards_S2C();\n            _proto_struct_obj.setCardsList(data.cards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.PLAYCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.PlayCards_S2C();\n            _proto_struct_obj.setCardsList(data.cards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.ILLEGALCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.IllegalCards_S2C();\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.GAMEEND_S2C:\n            _proto_struct_obj = new card_game_pb.GameEnd_S2C();\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.PLAYTURN_S2C:\n            _proto_struct_obj = new card_game_pb.PlayTurn_S2C();\n            _proto_struct_obj.setHandCardsList(data.handCards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        default:\n            console.log(&quot;no message matched.&quot;)\n    &#125;\n    if (_proto_struct_obj) &#123;\n        let _mainMsg = new card_game_pb.MainMessage();\n        _mainMsg.setCmdId(cmd);\n        let _data = _proto_struct_obj.serializeBinary();\n        _mainMsg.setData(_data);\n        let _completeData = _mainMsg.serializeBinary();\n        return _completeData;\n    &#125;\n    return null;\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EDecoding: &gt;enum Cmd is used to map message type here\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Efunction decodeData(buffer) &#123;\n    let _mainMsg = card_game_pb.MainMessage.deserializeBinary(buffer);\n    let _cmd = _mainMsg.getCmdId();\n    let _bytesData = _mainMsg.getData();\n    let _data;\n    switch (_cmd) &#123;\n        case card_game_pb.Cmd.READY_C2S:\n            _data = card_game_pb.Ready_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.ready_C2S) _this.ready_C2S(_data);\n            break;\n        case card_game_pb.Cmd.PLAYCARDS_C2S:\n            _data = card_game_pb.PlayCards_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                cards: _data.getCardsList(),\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.playCards_C2S) _this.playCards_C2S(_data);\n            break;\n        case card_game_pb.Cmd.COMPETEFORLANDLORDROLE_C2S:\n            _data = card_game_pb.CompeteForLandLordRole_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                score: _data.getScore(),\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.competeForLandLordRole_C2S) _this.competeForLandLordRole_C2S(_data);\n            break;\n        default:\n            console.log(&quot;no message matched.&quot;)\n    &#125;\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\u003Cp\u003ECaution:\u003C\u002Fp\u003E\n\u003Col\u003E\u003Cli\u003EAttributes defined as \u003Cstrong\u003Eseat_number\u003C\u002Fstrong\u003E in \u003Ccode\u003E.proto\u003C\u002Fcode\u003E file should be\ncall like getSeatNumber and setSeatNumebr.\u003C\u002Fli\u003E\n\u003Cli\u003EAttributes defined as \u003Cstrong\u003Erepeated\u003C\u002Fstrong\u003E type in \u003Ccode\u003E.proto\u003C\u002Fcode\u003E should call\ngetAttributeNameList and setAttributeList instead of the attribute self\nname.\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003C\u002Fblockquote\u003E",{"title":20,"slug":21,"coverImage":4,"date":22,"excerpt":23,"tags":24,"html":25,"readingTime":26},"Make a multiplayer card game - Episode 6 | Create 2D graphical interface with React","create-2d-graphical-interface-with-react-e6","2021-03-29T21:55:15.361Z","This section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api.",[8],"\u003Ch2 id=\"make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react\"\u003E\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react\"\u003E\u003Cspan\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003EMake a multiplayer card game - Episode 6 | Create 2D graphical interface with React\u003C\u002Fh2\u003E\n\u003Cp\u003EThis section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api. The following is an abstracted interface:\u003C\u002Fp\u003E\n\u003Cpre class=\"language-undefined\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-undefined\"\u003Eexport interface IGameSceneView &#123;\n    getViewComponent(name: string),\n    getNewViewComponent(comp),\n    getChild(childPath, parent),\n    addClickListener(comp, handler, target),\n    setCard(card, name),\n    setLabel(labelComp, text),\n    removeAllChildren(parent),\n    addChild(child, parent),\n    isCardSelected(card),\n    toggleCardSelectedStatus(card),\n    showComponent(comp),\n    hideComponent(comp)\n&#125;\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003ECompared with cocos creator, the implementation of react is more operable at the code level. The styles of interface elements are all implemented by handwritten code. The hot-reload that comes with create-react-app also responds to changes very quickly. There is a time to switch editors and wait for the editor to refresh, which is very lightweight.\u003C\u002Fp\u003E\n\u003Cp\u003ECode reference \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode6-react\" rel=\"nofollow\"\u003Ehttps:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode6-react\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EThe next article mainly introduces the comparison between cocos creator and react implementation in development.\u003C\u002Fp\u003E\n\u003Cp\u003EÊú¨ËäÇ‰∏ªË¶ÅÊòØÁî®reactÂÆûÁé∞UIËßÜÂõæ„ÄÇ\nÂú®Êú¨ËäÇ‰πãÂâçÔºåÂ∑≤ÁªèÁî®cocos creatorÂÆûÁé∞‰∫Ü‰∏Ä‰∏™UIËßÜÂõæÁâàÊú¨Ôºå‰∏∫‰∫ÜÈáçÁî®Âü∫Á°ÄÊ°ÜÊû∂ÔºåÊàë‰ª¨Â∞ÜÊ∏∏ÊàèÈÄªËæëËøõË°åÊäΩË±°ÔºåÂπ∂Â∞Ü‰∏éËßÜÂõæÂºïÊìéapiÁõ∏ÂÖ≥ÁöÑÈÄªËæëËß£ËÄ¶Âá∫Êù•„ÄÇ\n‰∏ãÈù¢ÊòØÊäΩË±°Âá∫Êù•ÁöÑ‰∏Ä‰∏™Êé•Âè£Ôºö\u003C\u002Fp\u003E\n\u003Cpre class=\"language-typescript\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-typescript\"\u003E\u003Cspan class=\"token keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003EIGameSceneView\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EgetViewComponent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ename\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EgetNewViewComponent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecomp\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EgetChild\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EchildPath\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E parent\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EaddClickListener\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecomp\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E handler\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E target\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EsetCard\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecard\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E name\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EsetLabel\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003ElabelComp\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E text\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EremoveAllChildren\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eparent\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EaddChild\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Echild\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E parent\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EisCardSelected\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecard\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EtoggleCardSelectedStatus\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecard\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EshowComponent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecomp\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EhideComponent\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ecomp\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EÁõ∏ÂØπ‰∫écocos creatorÔºåreactÁöÑÂÆûÁé∞Âú®‰ª£Á†ÅÂ±ÇÈù¢ÂèØÊìç‰ΩúÊÄßËæÉÂº∫Ôºå‰ΩìÁé∞Âú®ÁïåÈù¢ÂÖÉÁ¥†ÁöÑÊ†∑ÂºèÈÉΩÈÄöËøáÊâãÂÜô‰ª£Á†ÅÊù•ÂÆûÁé∞Ôºåcreate-react-appËá™Â∏¶ÁöÑhot-reload‰πüÈùûÂ∏∏Âø´Âú∞ÂèçÈ¶àÂèòÊõ¥Ôºå‰∏ç‰ºöÊúâÂàáÊç¢ÁºñËæëÂô®ÂíåÁ≠âÂæÖÁºñËæëÂô®Âà∑Êñ∞ÁöÑÊó∂Èó¥ÔºåÈùûÂ∏∏ËΩªÈáèÁöÑÊÑüËßâ„ÄÇ\u003C\u002Fp\u003E\n\u003Cp\u003E‰ª£Á†ÅÂèÇËÄÉ \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode6-react\" rel=\"nofollow\"\u003Ehttps:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode6-react\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E‰∏ã‰∏ÄÁØá‰∏ªË¶Å‰ªãÁªçcocos creator ‰∏é react ÂÆûÁé∞Âú®ÂºÄÂèë‰∏äÁöÑÂØπÊØî„ÄÇ\u003C\u002Fp\u003E","2 min read",{"title":28,"slug":29,"coverImage":4,"date":30,"excerpt":31,"tags":32,"html":33,"readingTime":26},"Make a multiplayer card game - Episode 1","create-a-simple-server-and-client-from-scratch-e1","2021-02-01T21:55:15.361Z","Create a simple server and client from scratch",[8],"\u003Ch2 id=\"make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch\"\u003E\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch\"\u003E\u003Cspan\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003EMake a multiplayer card game - Episode 1 | Create a simple server and client from scratch\u003C\u002Fh2\u003E\n\u003Cp\u003EIn the coming weeks, I‚Äôll be updating a series of tutorials on making a\nmultiplayer online card games base on the rule of the most popular Chinese card\ngame ‚ÄúDoudizhu‚Äù, which means battle with landlord. I divide this series in many\nsmall part to make it easy for most friends. If you know a little javascript,\nall the better.\u003C\u002Fp\u003E\n\u003Cp\u003EParts including:\u003C\u002Fp\u003E\n\u003Cul\u003E\u003Cli\u003Ecreate a simple server and client\u003C\u002Fli\u003E\n\u003Cli\u003Eplay cards in terminal with bots\u003C\u002Fli\u003E\n\u003Cli\u003Ecommunicate with server by protobuf\u003C\u002Fli\u003E\n\u003Cli\u003Eplay cards in terminal with other players\u003C\u002Fli\u003E\n\u003Cli\u003Ecreate 2D graphical interface with Cocos Creator\u003C\u002Fli\u003E\n\u003Cli\u003Ecreate 2D graphical interface with React\u003C\u002Fli\u003E\n\u003Cli\u003Ecreate 3D graphical interface with Three.js\u003C\u002Fli\u003E\n\u003Cli\u003Eadd physical lib ammo.js to add a tiny game\u003C\u002Fli\u003E\n\u003Cli\u003Econnect to Web3 world\u003C\u002Fli\u003E\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cem\u003Eopen your terminal, input \u003Ccode\u003Enode -v\u003C\u002Fcode\u003E, if something go wrong, please install\nnode.js first \u003Ca href=\"Link\"\u003Ehttps:\u002F\u002Fnodejs.org\u003C\u002Fa\u003E.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Edirectory structure :\n\u003Cimg src=\"https:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1644775769474\u002F2OAtz4Ljw.jpeg\" alt=\"demo0-document-tree.jpg\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Ecreate a server, server\u002Findex.js:\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block svelte-1pkpsrg\"\u003E\n\t\n\t\u003Cpre class=\"language-ts\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-ts\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E net \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"net\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E server \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E net\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EcreateServer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esocket\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  socket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"data\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EhandlerData\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esocket\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E data\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EhandlerData\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esocket\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E data\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Esend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esocket\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token string-property property\"\u003E\"msg\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Welcome, friend.\"\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Esend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esocket\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E data\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Elet\u003C\u002Fspan\u003E bufferData \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E Buffer\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token constant\"\u003EJSON\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Estringify\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  socket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ewrite\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EbufferData\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\nserver\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Elisten\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E8080\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token builtin\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"server listening on 127.0.0.1:8080\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003Ecreate client, client\u002Findex.js:\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block svelte-1pkpsrg\"\u003E\n\t\n\t\u003Cpre class=\"language-ts\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-ts\"\u003E\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E net \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erequire\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"net\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E socket \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"token class-name\"\u003Enet\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESocket\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\nsocket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Econnect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  host\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"127.0.0.1\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n  port\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E8080\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E onConnected\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\nsocket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"data\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ebuffer\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Edecode\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ebuffer\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\nsocket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"error\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ebuffer\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token builtin\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ebuffer\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EonConnected\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003EstartGame\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Edecode\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token builtin\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token constant\"\u003EJSON\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eparse\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Emsg\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Erequest\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E bufferData \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E Buffer\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token constant\"\u003EJSON\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Estringify\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token string-property property\"\u003E\"msg\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E data \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n  socket\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ewrite\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EbufferData\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EstartGame\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token function\"\u003Erequest\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"Hello, world!\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003Erun :\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecd server\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enode index.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecd client\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Enode index.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eresult:\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1644776034549\u002Ft-Jir1j9R.png\" alt=\"demo0-cmd-result.png\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EThis episode is end here, the complete demo can be found on\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode1\" rel=\"nofollow\"\u003Ehttps:\u002F\u002Fgithub.com\u002Flizhiyu-me\u002FMake-a-multiplayer-card-game\u002Ftree\u002Fepisode1\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EAny problems, discussion is welcome.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003EIn the next section, we will add the logic of Doudizhu game, and you will have\ncompleted a playable game in your terminal. \u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EThanks for your reading.\u003C\u002Fp\u003E"],"uses":{"url":1}},null]}
