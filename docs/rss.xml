
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>
  <channel>
    <atom:link href="https://sveltekit-static-blog-template.vercel.app//rss.xml" rel="self" type="application/rss+xml" />
    <title>SvelteKit Static Blog Template</title>
    <link>https://sveltekit-static-blog-template.vercel.app/</link>
    <description>A light, neat, and easy-to-use SvelteKit template for your next website.</description>
    <image>
      <url>https://sveltekit-static-blog-template.vercel.app//favicons/favicon-32x32.png</url>
      <title>SvelteKit Static Blog Template</title>
      <link>https://sveltekit-static-blog-template.vercel.app/</link>
      <width>32</width>
      <height>32</height>
    </image>
    
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//make-a-multiplayer-card-game-episode-7</guid>
          <title>Make a multiplayer card game - Episode 7 | Create 3D graphical interface with Three.js</title>
          <description>Create 3D graphical interface with Three.js</description>
          <link>https://sveltekit-static-blog-template.vercel.app//make-a-multiplayer-card-game-episode-7</link>
          <pubDate>Sat, 03 Apr 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//make-a-multiplayer-card-game-episode-7">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="make-a-multiplayer-card-game---episode-7--create-3d-graphical-interface-with-threejs"><a class="heading-link" title="Permalink" aria-hidden="true" href="#make-a-multiplayer-card-game---episode-7--create-3d-graphical-interface-with-threejs"><span>#</span></a>Make a multiplayer card game - Episode 7 | Create 3D graphical interface with Three.js</h2>
<p>This section mainly introduces the use
of<a href="https://docs.pmnd.rs/react-three-fiber/getting-started/introduction" rel="nofollow">react-three-fiber</a>(referred
to as R3F bellow) to realize the construction of interactive scenes.</p>
<h3 id="why-choose-r3f"><a class="heading-link" title="Permalink" aria-hidden="true" href="#why-choose-r3f"><span>#</span></a>Why Choose R3F</h3>
<ul><li>R3F just expresses Three.js in JSX, no extra overhead</li>
<li>Build scenes in a declarative way with react, including but not limited to
components that can easily react to state, are easy to interact with, and can
leverage React’s ecosystem</li></ul>
<h3 id="scenario-construction-implementation"><a class="heading-link" title="Permalink" aria-hidden="true" href="#scenario-construction-implementation"><span>#</span></a>Scenario construction implementation</h3>
<ul><li><strong>Card</strong></li></ul>
<p>Note that the texture required for rendering is obtained by passing the image
address to <code>useTexture</code></p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token comment">//Card.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useTexture <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@react-three/drei"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Mesh <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"three"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Card</span><span class="token punctuation">(</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    faceTextureUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    beginX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> _selectedOffsetY <span class="token operator">=</span> <span class="token number">.2</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _beginX <span class="token operator">=</span> props<span class="token punctuation">.</span>beginX<span class="token punctuation">;</span>
  <span class="token keyword">const</span> _texture <span class="token operator">=</span> <span class="token function">useTexture</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    map<span class="token operator">:</span> props<span class="token punctuation">.</span>faceTextureUrl<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>mesh
      position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>_beginX <span class="token operator">+</span> props<span class="token punctuation">.</span>idx <span class="token operator">*</span> <span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>idx <span class="token operator">*</span> <span class="token number">0.001</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _targetMesh <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token string">"eventObject"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Mesh<span class="token punctuation">;</span>
        <span class="token keyword">let</span> _pos <span class="token operator">=</span> _targetMesh<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
        <span class="token keyword">let</span> _upY<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_pos<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> _upY <span class="token operator">=</span> _selectedOffsetY<span class="token punctuation">;</span>
        <span class="token keyword">else</span> _upY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        _targetMesh<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_pos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> _upY<span class="token punctuation">,</span> _pos<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
      userData<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string-property property">"_d_cardSerial"</span><span class="token operator">:</span> props<span class="token punctuation">.</span>serial <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token operator">></span>
      <span class="token operator">&lt;</span>boxGeometry args<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">.001</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>meshStandardMaterial <span class="token punctuation">&#123;</span><span class="token operator">...</span>_texture<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mesh<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Card<span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<ul><li><strong>Game Scene</strong></li></ul>
<p>First you must declare a Canvas node, because all three.js must be under the
Canvas node</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token operator">&lt;</span>Canvas
  orthographic
  camera<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> zoom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token operator">></span>
  <span class="token operator">&lt;</span>R3fScene
    mainHandCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">&#125;</span>
    outCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>outCards<span class="token punctuation">&#125;</span>
    gameModel<span class="token operator">=</span><span class="token punctuation">&#123;</span>_gameModel<span class="token punctuation">&#125;</span>
  <span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>R3fScene<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Canvas<span class="token operator">></span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<p>In order to facilitate the use of hooks provided by</p>
<code>@react-three/fiber</code> (three.js related hooks can only be used under
the Canvas node), the game scene node is proposed separately
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">R3fScene</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> mainHandCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> gameModel<span class="token punctuation">;</span> outCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    scene<span class="token punctuation">,</span>
    camera<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span><span class="token function">getObjectByName</span><span class="token punctuation">(</span><span class="token string">"handList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mainHandCards <span class="token operator">=</span> props<span class="token punctuation">.</span>mainHandCards<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _gameModel <span class="token operator">=</span> props<span class="token punctuation">.</span>gameModel<span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span>context <span class="token operator">=</span> scene<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> _prefix <span class="token operator">=</span> <span class="token string">"/faces/"</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _readableName <span class="token operator">=</span> _gameModel<span class="token punctuation">.</span><span class="token function">getCardReadableName</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"rJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_B.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"bJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_R.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> _suitDic <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"S"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> _suitNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> serial <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_"</span> <span class="token operator">+</span> _suitDic<span class="token punctuation">[</span>_suitNumber<span class="token punctuation">]</span> <span class="token operator">+</span> _readableName <span class="token operator">+</span>
        <span class="token string">".png"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> _cardCount <span class="token operator">=</span> mainHandCards<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _beginX <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_cardCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">.5</span> <span class="token operator">+</span> <span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>CameraControls <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ambientLight intensity<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.1</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>directionalLight color<span class="token operator">=</span><span class="token string">"white"</span> position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>

      <span class="token operator">&lt;</span>group name<span class="token operator">=</span><span class="token string">"handList"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-1"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-2"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-0"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<p>In order to reflect the 3D interface, add an orbiting camera (swipe the scene to
adjust the camera corner)</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> OrbitControls <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">CameraControls</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    camera<span class="token punctuation">,</span>
    gl<span class="token operator">:</span> <span class="token punctuation">&#123;</span> domElement <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>controls<span class="token punctuation">.</span>current <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> OrbitControls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token operator">&lt;</span>orbitControls
      ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>controls<span class="token punctuation">&#125;</span>
      args<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>camera<span class="token punctuation">,</span> domElement<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      enableZoom<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span>
      maxAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      maxPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>
      rotationSpeed<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.01</span><span class="token punctuation">&#125;</span>
    <span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<p>Scene complete code：</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token comment">//App.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Canvas<span class="token punctuation">,</span> extend<span class="token punctuation">,</span> useFrame<span class="token punctuation">,</span> useThree <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@react-three/fiber"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> OrbitControls <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"three/examples/jsm/controls/OrbitControls"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"./App.css"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Card <span class="token keyword">from</span> <span class="token string">"./component/Card"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> GameModel <span class="token keyword">from</span> <span class="token string">"./base/src/game/model/GameModel"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> GameSceneMediator <span class="token keyword">from</span> <span class="token string">"./base/src/game/view/GameSceneMediator"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> GameSceneView <span class="token keyword">from</span> <span class="token string">"./component/GameSceneView"</span><span class="token punctuation">;</span>

<span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> OrbitControls <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">CameraControls</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    camera<span class="token punctuation">,</span>
    gl<span class="token operator">:</span> <span class="token punctuation">&#123;</span> domElement <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>controls<span class="token punctuation">.</span>current <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> OrbitControls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token operator">&lt;</span>orbitControls
      ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>controls<span class="token punctuation">&#125;</span>
      args<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>camera<span class="token punctuation">,</span> domElement<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      enableZoom<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span>
      maxAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      maxPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>
      rotationSpeed<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.01</span><span class="token punctuation">&#125;</span>
    <span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">R3fScene</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> mainHandCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> gameModel<span class="token punctuation">;</span> outCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    scene<span class="token punctuation">,</span>
    camera<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mainHandCards <span class="token operator">=</span> props<span class="token punctuation">.</span>mainHandCards<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _gameModel <span class="token operator">=</span> props<span class="token punctuation">.</span>gameModel<span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span>context <span class="token operator">=</span> scene<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> _prefix <span class="token operator">=</span> <span class="token string">"/faces/"</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _readableName <span class="token operator">=</span> _gameModel<span class="token punctuation">.</span><span class="token function">getCardReadableName</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"rJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_B.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"bJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_R.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> _suitDic <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"S"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> _suitNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> serial <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_"</span> <span class="token operator">+</span> _suitDic<span class="token punctuation">[</span>_suitNumber<span class="token punctuation">]</span> <span class="token operator">+</span> _readableName <span class="token operator">+</span>
        <span class="token string">".png"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> _cardCount <span class="token operator">=</span> mainHandCards<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _beginX <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_cardCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">.5</span> <span class="token operator">+</span> <span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>CameraControls <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ambientLight intensity<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.1</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>directionalLight color<span class="token operator">=</span><span class="token string">"white"</span> position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>

      <span class="token operator">&lt;</span>group name<span class="token operator">=</span><span class="token string">"handList"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-1"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-2"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-0"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> _gameFacade <span class="token operator">=</span> props<span class="token punctuation">.</span>gameFacade<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _gameModel<span class="token operator">:</span> GameModel <span class="token operator">=</span> _gameFacade<span class="token punctuation">.</span><span class="token function">retrieveProxy</span><span class="token punctuation">(</span><span class="token string">"GameModel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>mainHandCards<span class="token punctuation">,</span> setMainHandCards<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>_gameModel<span class="token punctuation">.</span>cardsArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>outCards<span class="token punctuation">,</span> setOutCards<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>_gameModel<span class="token punctuation">.</span>outCards<span class="token punctuation">)</span><span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span><span class="token function">setMainHandCardsHook</span><span class="token punctuation">(</span>setMainHandCards<span class="token punctuation">)</span><span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span><span class="token function">setOutCardsHook</span><span class="token punctuation">(</span>setOutCards<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_gameFacade<span class="token punctuation">.</span><span class="token function">retrieveMediator</span><span class="token punctuation">(</span><span class="token string">"GameSceneMediator"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      _gameFacade<span class="token punctuation">.</span><span class="token function">registerMediator</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">GameSceneMediator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GameSceneView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"canvas-container"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Canvas
          orthographic
          camera<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> zoom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token operator">></span>
          <span class="token operator">&lt;</span>R3fScene
            mainHandCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">&#125;</span>
            outCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>outCards<span class="token punctuation">&#125;</span>
            gameModel<span class="token operator">=</span><span class="token punctuation">&#123;</span>_gameModel<span class="token punctuation">&#125;</span>
          <span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>R3fScene<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Canvas<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span>div
        id<span class="token operator">=</span><span class="token string">"status"</span>
        style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
          display<span class="token operator">:</span> <span class="token string">"fix"</span><span class="token punctuation">,</span>
          textAlign<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>
          fontSize<span class="token operator">:</span> <span class="token string">"2em"</span><span class="token punctuation">,</span>
          userSelect<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
      <span class="token operator">></span>
        hello
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"controlPanel-scores"</span> className<span class="token operator">=</span><span class="token string">"controlPanel"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-scores-1"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-scores-2"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-scores-3"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"controlPanel-operation"</span> className<span class="token operator">=</span><span class="token string">"controlPanel"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-operation-pass"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span>
          pass
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-operation-play"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span>
          play
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<h3 id="framework-adaptation-changes"><a class="heading-link" title="Permalink" aria-hidden="true" href="#framework-adaptation-changes"><span>#</span></a>Framework adaptation changes</h3>
<ul><li><strong>Getting scene node</strong></li></ul>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token function">getViewComponent</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>isDOM<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>canvasScene<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDOM<span class="token punctuation">)</span> <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>canvasScene<span class="token punctuation">)</span> <span class="token keyword">return</span> canvasScene<span class="token punctuation">.</span><span class="token function">getObjectByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
<p>By passing in the scene object of three.js, call the getObjectByName interface
to obtain the node with the pre-set name attribute</p>
<ul><li><strong>Card value acquisition, card.userData (<code>userData</code> is the loading
object of custom attributes in R3F, similar to <code>data-yourAttribute</code>
in react, here you can encapsulate a method to decouple GameSceneMediator from
card value, making the mediator more reusable )</strong></li></ul>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token keyword">private</span> <span class="token function">onOutCards_C2S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hideControlPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _outCardsSerial <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _cardsContainer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mViewClass<span class="token punctuation">.</span><span class="token function">getViewComponent</span><span class="token punctuation">(</span><span class="token string">"handList"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGameModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _cards <span class="token operator">=</span> _cardsContainer<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _cards<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> _card <span class="token operator">=</span> _cards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mViewClass<span class="token punctuation">.</span><span class="token function">isCardSelected</span><span class="token punctuation">(</span>_card<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                _outCardsSerial<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_card<span class="token punctuation">.</span>userData<span class="token punctuation">[</span><span class="token string">"_d_cardSerial"</span><span class="token punctuation">]</span><span class="token operator">||</span>_card<span class="token punctuation">[</span><span class="token string">"_d_cardSerial"</span><span class="token punctuation">]</span> <span class="token operator">||</span> _card<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-card-serial"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNetFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">sendNotification</span><span class="token punctuation">(</span>card_game_pb<span class="token punctuation">.</span>Cmd<span class="token punctuation">.</span><span class="token constant">PLAYCARDS_C2S</span><span class="token punctuation">,</span> _outCardsSerial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
<ul><li><strong>Node coordinate adjustment</strong></li></ul>
<p>By judging the adjustment of the corresponding css attribute of the node style
to the corresponding attribute of the node position object</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token function">isCardSelected</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> card<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">.2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
<p><a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode7-r3f" rel="nofollow">Checkout the repo https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode7-r3f</a></p>
<hr>
<p>本节主要介绍利用<a href="https://docs.pmnd.rs/react-three-fiber/getting-started/introduction" rel="nofollow">react-three-fiber</a>(以下简称R3F)实现交互场景的搭建。</p>
<h3 id="为什么选择r3f"><a class="heading-link" title="Permalink" aria-hidden="true" href="#为什么选择r3f"><span>#</span></a>为什么选择R3F</h3>
<ul><li>R3F仅仅是将Three.js用JSX进行表示，没有额外开销</li>
<li>可以用react的声明方式构建场景，包括但不限于组件可轻松对状态做出反应，易于交互，并且可以利用
React 的生态</li></ul>
<h3 id="场景构建实现"><a class="heading-link" title="Permalink" aria-hidden="true" href="#场景构建实现"><span>#</span></a>场景构建实现</h3>
<ul><li><strong>扑克牌</strong></li></ul>
<p>注意此处通过将图片地址传给<code>useTexture</code>，得到渲染需要的纹理</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token comment">//Card.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useTexture <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@react-three/drei"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Mesh <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"three"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Card</span><span class="token punctuation">(</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    faceTextureUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    beginX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> _selectedOffsetY <span class="token operator">=</span> <span class="token number">.2</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _beginX <span class="token operator">=</span> props<span class="token punctuation">.</span>beginX<span class="token punctuation">;</span>
  <span class="token keyword">const</span> _texture <span class="token operator">=</span> <span class="token function">useTexture</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    map<span class="token operator">:</span> props<span class="token punctuation">.</span>faceTextureUrl<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>mesh
      position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>_beginX <span class="token operator">+</span> props<span class="token punctuation">.</span>idx <span class="token operator">*</span> <span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>idx <span class="token operator">*</span> <span class="token number">0.001</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _targetMesh <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token string">"eventObject"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Mesh<span class="token punctuation">;</span>
        <span class="token keyword">let</span> _pos <span class="token operator">=</span> _targetMesh<span class="token punctuation">.</span>position<span class="token punctuation">;</span>
        <span class="token keyword">let</span> _upY<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_pos<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> _upY <span class="token operator">=</span> _selectedOffsetY<span class="token punctuation">;</span>
        <span class="token keyword">else</span> _upY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        _targetMesh<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>_pos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> _upY<span class="token punctuation">,</span> _pos<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
      userData<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string-property property">"_d_cardSerial"</span><span class="token operator">:</span> props<span class="token punctuation">.</span>serial <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token operator">></span>
      <span class="token operator">&lt;</span>boxGeometry args<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">.001</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>meshStandardMaterial <span class="token punctuation">&#123;</span><span class="token operator">...</span>_texture<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>mesh<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Card<span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<ul><li><strong>游戏场景</strong></li></ul>
<p>首先必须声明一个Canvas节点，因为three.js的所有都必须在Canvas节点下</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token operator">&lt;</span>Canvas
  orthographic
  camera<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> zoom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token operator">></span>
  <span class="token operator">&lt;</span>R3fScene
    mainHandCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">&#125;</span>
    outCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>outCards<span class="token punctuation">&#125;</span>
    gameModel<span class="token operator">=</span><span class="token punctuation">&#123;</span>_gameModel<span class="token punctuation">&#125;</span>
  <span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>R3fScene<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Canvas<span class="token operator">></span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<p>为了方便使用<code>@react-three/fiber</code>提供的hook（three.js相关的hook只能在Canvas节点下使用）,将游戏场景节点单独提出来</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">R3fScene</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> mainHandCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> gameModel<span class="token punctuation">;</span> outCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    scene<span class="token punctuation">,</span>
    camera<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span><span class="token function">getObjectByName</span><span class="token punctuation">(</span><span class="token string">"handList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mainHandCards <span class="token operator">=</span> props<span class="token punctuation">.</span>mainHandCards<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _gameModel <span class="token operator">=</span> props<span class="token punctuation">.</span>gameModel<span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span>context <span class="token operator">=</span> scene<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> _prefix <span class="token operator">=</span> <span class="token string">"/faces/"</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _readableName <span class="token operator">=</span> _gameModel<span class="token punctuation">.</span><span class="token function">getCardReadableName</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"rJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_B.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"bJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_R.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> _suitDic <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"S"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> _suitNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> serial <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_"</span> <span class="token operator">+</span> _suitDic<span class="token punctuation">[</span>_suitNumber<span class="token punctuation">]</span> <span class="token operator">+</span> _readableName <span class="token operator">+</span>
        <span class="token string">".png"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> _cardCount <span class="token operator">=</span> mainHandCards<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _beginX <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_cardCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">.5</span> <span class="token operator">+</span> <span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>CameraControls <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ambientLight intensity<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.1</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>directionalLight color<span class="token operator">=</span><span class="token string">"white"</span> position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>

      <span class="token operator">&lt;</span>group name<span class="token operator">=</span><span class="token string">"handList"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-1"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-2"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-0"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<p>为了体现3D界面，添加一个轨道相机（滑动场景即可调整相机转角）</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> OrbitControls <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">CameraControls</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    camera<span class="token punctuation">,</span>
    gl<span class="token operator">:</span> <span class="token punctuation">&#123;</span> domElement <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>controls<span class="token punctuation">.</span>current <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> OrbitControls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token operator">&lt;</span>orbitControls
      ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>controls<span class="token punctuation">&#125;</span>
      args<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>camera<span class="token punctuation">,</span> domElement<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      enableZoom<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span>
      maxAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      maxPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>
      rotationSpeed<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.01</span><span class="token punctuation">&#125;</span>
    <span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<p>场景完整代码：</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token comment">//App.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Canvas<span class="token punctuation">,</span> extend<span class="token punctuation">,</span> useFrame<span class="token punctuation">,</span> useThree <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@react-three/fiber"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> OrbitControls <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"three/examples/jsm/controls/OrbitControls"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"./App.css"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Card <span class="token keyword">from</span> <span class="token string">"./component/Card"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> GameModel <span class="token keyword">from</span> <span class="token string">"./base/src/game/model/GameModel"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> GameSceneMediator <span class="token keyword">from</span> <span class="token string">"./base/src/game/view/GameSceneMediator"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> GameSceneView <span class="token keyword">from</span> <span class="token string">"./component/GameSceneView"</span><span class="token punctuation">;</span>

<span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> OrbitControls <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">CameraControls</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    camera<span class="token punctuation">,</span>
    gl<span class="token operator">:</span> <span class="token punctuation">&#123;</span> domElement <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>controls<span class="token punctuation">.</span>current <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> OrbitControls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token operator">&lt;</span>orbitControls
      ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>controls<span class="token punctuation">&#125;</span>
      args<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>camera<span class="token punctuation">,</span> domElement<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      enableZoom<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span>
      maxAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      maxPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minAzimuthAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
      minPolarAngle<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>
      rotationSpeed<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.01</span><span class="token punctuation">&#125;</span>
    <span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">R3fScene</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> mainHandCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> gameModel<span class="token punctuation">;</span> outCards<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    scene<span class="token punctuation">,</span>
    camera<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> mainHandCards <span class="token operator">=</span> props<span class="token punctuation">.</span>mainHandCards<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _gameModel <span class="token operator">=</span> props<span class="token punctuation">.</span>gameModel<span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span>context <span class="token operator">=</span> scene<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> _prefix <span class="token operator">=</span> <span class="token string">"/faces/"</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> _readableName <span class="token operator">=</span> _gameModel<span class="token punctuation">.</span><span class="token function">getCardReadableName</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"rJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_B.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_readableName <span class="token operator">===</span> <span class="token string">"bJkr"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_Joker_R.png"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> _suitDic <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"S"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> _suitNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> serial <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> _prefix <span class="token operator">+</span> <span class="token string">"Poker_"</span> <span class="token operator">+</span> _suitDic<span class="token punctuation">[</span>_suitNumber<span class="token punctuation">]</span> <span class="token operator">+</span> _readableName <span class="token operator">+</span>
        <span class="token string">".png"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> _cardCount <span class="token operator">=</span> mainHandCards<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _beginX <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_cardCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">.5</span> <span class="token operator">+</span> <span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>CameraControls <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ambientLight intensity<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0.1</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>directionalLight color<span class="token operator">=</span><span class="token string">"white"</span> position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>

      <span class="token operator">&lt;</span>group name<span class="token operator">=</span><span class="token string">"handList"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-1"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-2"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
      <span class="token operator">&lt;</span>group position<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> scale<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">.6</span><span class="token punctuation">&#125;</span> name<span class="token operator">=</span><span class="token string">"out-list-0"</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>outCards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>serial<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Card
              key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span> <span class="token operator">+</span> serial<span class="token punctuation">&#125;</span>
              faceTextureUrl<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getFaceTextureUrl</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
              idx<span class="token operator">=</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">&#125;</span>
              beginX<span class="token operator">=</span><span class="token punctuation">&#123;</span>_beginX<span class="token punctuation">&#125;</span>
              serial<span class="token operator">=</span><span class="token punctuation">&#123;</span>serial<span class="token punctuation">&#125;</span>
            <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>group<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> _gameFacade <span class="token operator">=</span> props<span class="token punctuation">.</span>gameFacade<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _gameModel<span class="token operator">:</span> GameModel <span class="token operator">=</span> _gameFacade<span class="token punctuation">.</span><span class="token function">retrieveProxy</span><span class="token punctuation">(</span><span class="token string">"GameModel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>mainHandCards<span class="token punctuation">,</span> setMainHandCards<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>_gameModel<span class="token punctuation">.</span>cardsArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>outCards<span class="token punctuation">,</span> setOutCards<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>_gameModel<span class="token punctuation">.</span>outCards<span class="token punctuation">)</span><span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span><span class="token function">setMainHandCardsHook</span><span class="token punctuation">(</span>setMainHandCards<span class="token punctuation">)</span><span class="token punctuation">;</span>
  _gameModel<span class="token punctuation">.</span><span class="token function">setOutCardsHook</span><span class="token punctuation">(</span>setOutCards<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_gameFacade<span class="token punctuation">.</span><span class="token function">retrieveMediator</span><span class="token punctuation">(</span><span class="token string">"GameSceneMediator"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      _gameFacade<span class="token punctuation">.</span><span class="token function">registerMediator</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">GameSceneMediator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GameSceneView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"canvas-container"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Canvas
          orthographic
          camera<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> zoom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token operator">></span>
          <span class="token operator">&lt;</span>R3fScene
            mainHandCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>mainHandCards<span class="token punctuation">&#125;</span>
            outCards<span class="token operator">=</span><span class="token punctuation">&#123;</span>outCards<span class="token punctuation">&#125;</span>
            gameModel<span class="token operator">=</span><span class="token punctuation">&#123;</span>_gameModel<span class="token punctuation">&#125;</span>
          <span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>R3fScene<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Canvas<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span>div
        id<span class="token operator">=</span><span class="token string">"status"</span>
        style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
          display<span class="token operator">:</span> <span class="token string">"fix"</span><span class="token punctuation">,</span>
          textAlign<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>
          fontSize<span class="token operator">:</span> <span class="token string">"2em"</span><span class="token punctuation">,</span>
          userSelect<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
      <span class="token operator">></span>
        hello
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"controlPanel-scores"</span> className<span class="token operator">=</span><span class="token string">"controlPanel"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-scores-1"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-scores-2"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-scores-3"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"controlPanel-operation"</span> className<span class="token operator">=</span><span class="token string">"controlPanel"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-operation-pass"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span>
          pass
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"controlPanel-operation-play"</span> className<span class="token operator">=</span><span class="token string">"controlButton"</span><span class="token operator">></span>
          play
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<h3 id="框架适配改动"><a class="heading-link" title="Permalink" aria-hidden="true" href="#框架适配改动"><span>#</span></a>框架适配改动</h3>
<ul><li><strong>获取场景节点</strong></li></ul>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token function">getViewComponent</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>isDOM<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>canvasScene<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isDOM<span class="token punctuation">)</span> <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>canvasScene<span class="token punctuation">)</span> <span class="token keyword">return</span> canvasScene<span class="token punctuation">.</span><span class="token function">getObjectByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
<p>通过传入three.js的场景对象，调用getObjectByName接口获取预先设置好name属性的节点</p>
<ul><li><strong>牌值获取card.userData（userData是R3F中自定义属性的装载对象，类似react中的data-yourAttribute,
在这里可以封装一个方法，让GameSceneMediator与牌取值解耦，使mediator的复用性更强）</strong></li></ul>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token keyword">private</span> <span class="token function">onOutCards_C2S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hideControlPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _outCardsSerial <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _cardsContainer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mViewClass<span class="token punctuation">.</span><span class="token function">getViewComponent</span><span class="token punctuation">(</span><span class="token string">"handList"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGameModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _cards <span class="token operator">=</span> _cardsContainer<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _cards<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> _card <span class="token operator">=</span> _cards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mViewClass<span class="token punctuation">.</span><span class="token function">isCardSelected</span><span class="token punctuation">(</span>_card<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                _outCardsSerial<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_card<span class="token punctuation">.</span>userData<span class="token punctuation">[</span><span class="token string">"_d_cardSerial"</span><span class="token punctuation">]</span><span class="token operator">||</span>_card<span class="token punctuation">[</span><span class="token string">"_d_cardSerial"</span><span class="token punctuation">]</span> <span class="token operator">||</span> _card<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-card-serial"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNetFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">sendNotification</span><span class="token punctuation">(</span>card_game_pb<span class="token punctuation">.</span>Cmd<span class="token punctuation">.</span><span class="token constant">PLAYCARDS_C2S</span><span class="token punctuation">,</span> _outCardsSerial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
<ul><li><strong>节点坐标调整</strong></li></ul>
<p>由判断节点style 相应css属性的调整为节点position对象相应属性</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token function">isCardSelected</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> card<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">.2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
<p><a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode7-r3f" rel="nofollow">查看本节相关代码 https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode7-r3f</a></p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//create-2d-graphical-interface-with-react-e6</guid>
          <title>Make a multiplayer card game - Episode 6 | Create 2D graphical interface with React</title>
          <description>This section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api.</description>
          <link>https://sveltekit-static-blog-template.vercel.app//create-2d-graphical-interface-with-react-e6</link>
          <pubDate>Tue, 30 Mar 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//create-2d-graphical-interface-with-react-e6">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react"><a class="heading-link" title="Permalink" aria-hidden="true" href="#make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react"><span>#</span></a>Make a multiplayer card game - Episode 6 | Create 2D graphical interface with React</h2>
<p>This section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api. The following is an abstracted interface:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">export interface IGameSceneView &#123;
    getViewComponent(name: string),
    getNewViewComponent(comp),
    getChild(childPath, parent),
    addClickListener(comp, handler, target),
    setCard(card, name),
    setLabel(labelComp, text),
    removeAllChildren(parent),
    addChild(child, parent),
    isCardSelected(card),
    toggleCardSelectedStatus(card),
    showComponent(comp),
    hideComponent(comp)
&#125;</code><!-- HTML_TAG_END --></pre>
<p>Compared with cocos creator, the implementation of react is more operable at the code level. The styles of interface elements are all implemented by handwritten code. The hot-reload that comes with create-react-app also responds to changes very quickly. There is a time to switch editors and wait for the editor to refresh, which is very lightweight.</p>
<p>Code reference <a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react" rel="nofollow">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react</a></p>
<p>The next article mainly introduces the comparison between cocos creator and react implementation in development.</p>
<p>本节主要是用react实现UI视图。
在本节之前，已经用cocos creator实现了一个UI视图版本，为了重用基础框架，我们将游戏逻辑进行抽象，并将与视图引擎api相关的逻辑解耦出来。
下面是抽象出来的一个接口：</p>
<pre class="language-typescript"><!-- HTML_TAG_START --><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IGameSceneView</span> <span class="token punctuation">&#123;</span>
    <span class="token function">getViewComponent</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">getNewViewComponent</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">getChild</span><span class="token punctuation">(</span>childPath<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">addClickListener</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">setCard</span><span class="token punctuation">(</span>card<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">setLabel</span><span class="token punctuation">(</span>labelComp<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">removeAllChildren</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">addChild</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">isCardSelected</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">toggleCardSelectedStatus</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">showComponent</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">hideComponent</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
<p>相对于cocos creator，react的实现在代码层面可操作性较强，体现在界面元素的样式都通过手写代码来实现，create-react-app自带的hot-reload也非常快地反馈变更，不会有切换编辑器和等待编辑器刷新的时间，非常轻量的感觉。</p>
<p>代码参考 <a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react" rel="nofollow">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react</a></p>
<p>下一篇主要介绍cocos creator 与 react 实现在开发上的对比。</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//make-a-multiplayer-card-game-episode-5</guid>
          <title>Make a multiplayer card game - Episode 5 | Create 2D graphical interface with Cocos Creator</title>
          <description>Create 2D graphical interface with Cocos Creator</description>
          <link>https://sveltekit-static-blog-template.vercel.app//make-a-multiplayer-card-game-episode-5</link>
          <pubDate>Tue, 23 Mar 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//make-a-multiplayer-card-game-episode-5">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="make-a-multiplayer-card-game---episode-5--create-2d-graphical-interface-with-cocos-creator"><a class="heading-link" title="Permalink" aria-hidden="true" href="#make-a-multiplayer-card-game---episode-5--create-2d-graphical-interface-with-cocos-creator"><span>#</span></a>Make a multiplayer card game - Episode 5 | Create 2D graphical interface with Cocos Creator</h2>
<p>This chapter is almost a month away from the previous chapter. During this
period, it is mainly about the transformation and reconstruction of the client.
The content of the overall client is almost completely different from the
command-line version of the previous chapter.</p>
<p>According to the previous plan, I converted all the code written in JS to TS and
transplanted the command-line interactive interface to the conventional game
interactive interface (using cocos creator game engine).</p>
<p>Previously, in order to quickly realize the function, the server and client used
only one file to encode. Up to now, the client code of the project has been
modularized, and the classic PureMVC library has been introduced to completely
decouple the UI interaction and data, network messages and game operation logic,
so as to create conditions for extracting the code of the framework independent
of the game engine (it is planned to use one framework to access different view
layer engines).</p>
<p>PureMVC has been introduced in previous articles. The core idea is to decouple
view and data. The data is processed by proxy and the facade is controlled by
proxy.</p>
<p>Compared with the previous version, some changes are involved: -The difference
between socket and web socket API. It mainly includes the names of several
monitored events and the interfaces for sending messages. -UI display layer
independent. Command line output and game engine rendering view interactive
operation interface.</p>
<p><a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode5-UICocosCreator" rel="nofollow">demo url</a></p>
<p>本章离前一章快一个月了，在这段时间，主要是对客户端的改造和重构，整体客户端的内容几乎完全不同于上一章命令行版本。</p>
<p>按照之前的计划，我将之前用js写的代码全部转为了ts，将命令行交互界面移植到常规的游戏交互界面（利用CocosCreator游戏引擎）。</p>
<p>之前为了快速实现功能，服务器和客户端分别只用一个文件进行编码。
截至目前，项目客户端代码进行了模块化改造，引入了经典的PureMVC库，将UI交互和数据，网络消息和游戏操作逻辑完全解藕，为后面提取与游戏引擎无关的框架（计划用一个框架接入不同视图层引擎）代码创造条件。</p>
<p>在之前的文章里面已经介绍过PureMVC，核心的思想就是视图与数据解藕。
通过一个门面类（Facade）来统管框架，用视图代理（Mediator）控制显示组件逻辑，用数据模型代理（Proxy）存储和处理数据。</p>
<p>相对于上一版，涉及到的一些改动：</p>
<ul><li>socket 和 web socket api 的区别。主要是几个监听的事件名字，和发送消息的接口。</li>
<li>ui显示层独立。命令行输出和游戏引擎渲染视图交互操作界面。</li></ul>
<p><a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode5-UICocosCreator" rel="nofollow">demo url</a></p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//prior-for-e5-puremvc</guid>
          <title>PureMVC | Prior for Episode 5</title>
          <description>PureMVC will be included in next episode.</description>
          <link>https://sveltekit-static-blog-template.vercel.app//prior-for-e5-puremvc</link>
          <pubDate>Tue, 16 Mar 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//prior-for-e5-puremvc">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="puremvc--prior-for-episode-5"><a class="heading-link" title="Permalink" aria-hidden="true" href="#puremvc--prior-for-episode-5"><span>#</span></a>PureMVC | Prior for Episode 5</h2>
<blockquote><p>PureMVC will be included in next episode.</p></blockquote>
<blockquote><p>PureMVC is a framework for creating applications based upon the
well-established model–view–controller (MVC) design pattern. The free, open
source framework was originally implemented in the ActionScript 3 language for
use with Adobe Flex, Flash and AIR, and it has since been ported to nearly all
the major web development platforms.</p></blockquote>
<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1648287487663/TkUwfryAy.jpg" alt="puremvc.jpg"></p>
<p>Advantages and disadvantages of PureMVC:</p>
<ul><li><strong>Advantages </strong></li></ul>
<ol><li><p>Use intermediaries, agents and commands to realize decoupling, which reduces
the coupling among model, view and controller and improves the reuse of some
codes</p></li>
<li><p>The view interface can be reused</p></li>
<li><p>Model data can be reused</p></li></ol>
<ul><li><strong>Disadvantages </strong></li></ul>
<ol><li>Code redundancy is large. For simple functions, you have to create view,
mediator, command, facade, proxy and model scripts</li>
<li>The operation process is a cumbersome process, and the code in mediator will
appear complex and difficult to understand, unless you are familiar with the
implementation principle of PureMVC</li></ol>
<ul><li><strong>PureMVC features</strong></li></ul>
<ol><li>The notice shall be delivered through the operation of packing and unpacking</li>
<li>The command / notification is implemented in the observer mode. The command /
notification uses the reflection acquisition method in the observer and is
executed</li>
<li>No service (this module for network communication can be added according to
the structure of MVC)</li>
<li>Data is transmitted through notification. Sendnotification has only one
object type parameter. It will feel that the data transmission is limited.
You can combine the data into a type / structure for transmission, or expand
another parameter for notification.</li></ol>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//prior-for-e5-ccc</guid>
          <title>Prior for Episode 5 - Cocos Creator</title>
          <description>I am writing a demo by Cocos Creator for episode 5</description>
          <link>https://sveltekit-static-blog-template.vercel.app//prior-for-e5-ccc</link>
          <pubDate>Tue, 09 Mar 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//prior-for-e5-ccc">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="cocos-creator--prior-for-episode-5"><a class="heading-link" title="Permalink" aria-hidden="true" href="#cocos-creator--prior-for-episode-5"><span>#</span></a>Cocos Creator | Prior for Episode 5</h2>
<blockquote><p>I am wirting a demo by Cocos Creator for episode 5</p></blockquote>
<h3 id="what"><a class="heading-link" title="Permalink" aria-hidden="true" href="#what"><span>#</span></a>What</h3>
<p>Cocos Creator is a content creation-focused, scripted, component-based and
data-driven game development tool. It features an easy-to-use content production
workflow and a powerful developer tool suite for implementing game logic and
high-performance game effects. In keeping with Cocos’s usual product features
like open-source, easy-to-use, high-performance and cross-platform, this new
game engine is designed to be the new choice for developers to create 2D and 3D
games.</p>
<h3 id="why"><a class="heading-link" title="Permalink" aria-hidden="true" href="#why"><span>#</span></a>Why</h3>
<ul><li>Easy to use with developer tool suite especially a official visualize editor</li>
<li>Integrate many target platforms’ SDK</li>
<li>Well popularity of Mini Game on Wechat and other platform apps</li>
<li>Almost same work flow with Unity, attract developer who use Unity before and
want post game on mini game platform</li></ul>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//play-cards-with-other-players-e4</guid>
          <title>Make a multiplayer card game - Episode 4</title>
          <description>Play cards with other players</description>
          <link>https://sveltekit-static-blog-template.vercel.app//play-cards-with-other-players-e4</link>
          <pubDate>Tue, 02 Mar 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//play-cards-with-other-players-e4">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="make-a-multiplayer-card-game---episode-4--play-cards-with-other-players"><a class="heading-link" title="Permalink" aria-hidden="true" href="#make-a-multiplayer-card-game---episode-4--play-cards-with-other-players"><span>#</span></a>Make a multiplayer card game - Episode 4 | Play cards with other players</h2>
<blockquote><p>This section is a milestone in this series of tutorials, and after this
article, there will present a complete multiplayer local online card game.</p></blockquote>
<p>The key point of this section is how to link multiplayer to play.</p>
<h4 id="almost-all-changes-is-on-the-server-side"><a class="heading-link" title="Permalink" aria-hidden="true" href="#almost-all-changes-is-on-the-server-side"><span>#</span></a>Almost all changes is on the server side:</h4>
<p>We make a server and listen on “connection” event.</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">const net = require(&#39;net&#39;);
const server = net.createServer();
server.on(&quot;connection&quot;,()=&gt;&#123;&#125;);</code><!-- HTML_TAG_END --></pre>
<p>Then we generate a player ID and seat number for the player connecting.</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">var playerIDArr = [];
function generatePlayerIDAndSeatNumber() &#123;
    let _seat = playerIDArr.length;
    let _id = Math.floor(Math.random() * 10000);
    let _isExist = playerIDArr.indexOf(_id) != -1;
    if (_isExist) &#123;
        generatePlayerIDAndSeatNumber();
    &#125; else &#123;
        playerIDArr.push(_id);
    &#125;
    return &#123; id: _id, seat: _seat &#125;;
&#125;</code><!-- HTML_TAG_END --></pre>
<p>Back to the “connection” event, we assign some attributes on socket to make a
identification.</p>
<pre class="language-javascript"><!-- HTML_TAG_START --><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> _id_seat <span class="token operator">=</span> <span class="token function">generatePlayerIDAndSeatNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _playerID <span class="token operator">=</span> _id_seat<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _seatNumber <span class="token operator">=</span> _id_seat<span class="token punctuation">.</span>seat<span class="token punctuation">;</span>
  socket<span class="token punctuation">.</span>id <span class="token operator">=</span> _playerID<span class="token punctuation">;</span>
  socket<span class="token punctuation">.</span>seat <span class="token operator">=</span> _seatNumber<span class="token punctuation">;</span>
  socketDic<span class="token punctuation">[</span>_playerID<span class="token punctuation">]</span> <span class="token operator">=</span> socket<span class="token punctuation">;</span>

  <span class="token function">addSocketListener</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
<p>Add event listener to each socket, listen players’ interaction information
through data which cotain the command ID to route different game logic:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">function addSocketListener(socket) &#123;
    socket.on(&#39;data&#39;, (data) =&gt; &#123;
        let _playerID = socket.id;
        decodeData(data, _playerID);
    &#125;);
    socket.on(&#39;error&#39;, (error) =&gt; &#123;
        //player disconnect
        console.log(error);
    &#125;);
&#125;</code><!-- HTML_TAG_END --></pre>
<p>the server forwards each player’s messages, which are divided into separate
sending and broadcasting.</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">//send to a specific player
function send(playerID, cmd, data) &#123;
    if (!mIsGaming) return;
    const _dataBuffer = encodeData(cmd, data);
    if (_dataBuffer) socketDic[playerID].write(_dataBuffer);
&#125;
//send to all players
function broadcast(cmd, data) &#123;
    if (!mIsGaming) return;
    const _dataBuffer = encodeData(cmd, data);
    if (_dataBuffer) &#123;
        let _keyArr = Object.keys(socketDic);
        for (let i = 0; i &lt; _keyArr.length; i++) &#123;
            let _socket = socketDic[_keyArr[i]];
            _socket.write(_dataBuffer);
        &#125;
    &#125;
&#125;</code><!-- HTML_TAG_END --></pre>
<p>That’s all the key points in this section, as above present, players can be
connect to a server and play with each other. You can check
<a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode4" rel="nofollow">episode4 tag</a>
to see the complete code.</p>
<hr>
<p>The progress of the project up to this point have make a milestone, will not add
new content to the relevant repo main branch, excluding the subsequent
refactoring to prepare for the involvement of the game engine and framework.</p>
<p>The addition of new content will open another branch for development. Like each
episode, a tag will still be added after the chapter ends. You can find the
content of the corresponding chapter through the corresponding tag at any time.</p>
<p>In order to reflect the simplicity of native nodejs, I chose javascript. But I
have been developing with typescript in the past few years, is not very familiar
with javascript, which I must spend a little bit more time on debugging.</p>
<p>The content of the following chapters will expand rapidly. For either the
robustness of development or my proficiency. I will use typescript for new
content development and refactoring in later articles.</p>
<p><strong>The next episode, as the content list in the first episode, I will add game
engine Cocos Creator, before which I will make a refactory, besides move
javascript to typescript, but something about modularity.</strong></p>
<p>Thanks for your reading, and discussion is always welcome, I am very glad to
talk with you in below comment section😊.</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//change-json-to-protocol-buffers-e3</guid>
          <title>Make a multiplayer card game - Episode 3</title>
          <description>Change JSON to Protocol Buffers</description>
          <link>https://sveltekit-static-blog-template.vercel.app//change-json-to-protocol-buffers-e3</link>
          <pubDate>Tue, 23 Feb 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//change-json-to-protocol-buffers-e3">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers"><a class="heading-link" title="Permalink" aria-hidden="true" href="#make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers"><span>#</span></a>Make a multiplayer card game - Episode 3 | Change JSON to Protocol Buffers</h2>
<blockquote><p>Protocol buffers are a language-neutral, platform-neutral extensible mechanism
for serializing structured data. It has many advantages such as “Lesser in
Size and Better in Performance”, like this article
<a href="https://anuragthakur.hashnode.dev/protobuf-why-google-moved-from-json-to-protocol-buffers-ckdxb8sgi03kdjas17ril3fbi" rel="nofollow">Why Google moved from JSON to Protocol Buffers?</a>
introduce.</p></blockquote>
<p>I used it on all the projects I’ve worked on over the years. Besides the better
performance, what make me impressed is that the clean communication between
client and server with protocol buffers.</p>
<blockquote><p>You can clone
<a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode3" rel="nofollow">demo for episode3</a>
which including all the bellow content.</p></blockquote>
<p>According to the
<a href="https://github.com/protocolbuffers/protobuf" rel="nofollow">official tutorial</a>, two steps
should be done:</p>
<ol><li>Install the runtime library <code>google-protobuf</code>:<code>npm install
google-protobuf</code>.</li>
<li>Get the Protocol Compiler <code>protoc</code>: download from
<a href="https://github.com/protocolbuffers/protobuf/releases" rel="nofollow">https://github.com/protocolbuffers/protobuf/releases</a></li></ol>
<p>Then run a command like <code>protoc —js_out=import_style=commonjs,binary:.
messages.proto base.proto</code>, you can get the <code>.js</code> file from</p>
<code>.proto</code>.
<p>When the <code>.js</code> file generated, the protocol buffers environment is
ready.</p>
<p>Back to our game, we should create a <code>.proto</code> file, named</p>
<code>card-game.proto</code>.
<p>The first line in <code>.proto</code> file should be:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">syntax = &quot;proto3&quot;;</code><!-- HTML_TAG_END --></pre>
<p>which means which version of Protobuf we are using.</p>
<p>Define the enum of Cmd:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">enum Cmd&#123;
    NONE = 0;
    READY_C2S = 1;
    DEALCARDS_S2C = 2;
    COMPETEFORLANDLORDROLE_C2S = 3;
    PLAYTURN_S2C = 4;
    PLAYCARDS_C2S = 5;
    PLAYCARDS_S2C = 6;
    ILLEGALCARDS_S2C = 7;
    GAMEEND_S2C = 8;
&#125;</code><!-- HTML_TAG_END --></pre>
<p>enum Cmd is for routing, will be introduced later.</p>
<p>Define MainMessage message:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">message MainMessage&#123;
    uint32 cmd_id = 1;
    bytes data =2;
&#125;</code><!-- HTML_TAG_END --></pre>
<p>In order to encapsulate the header and data body, we should assign serialized
message to the data attribute.</p>
<p>Define data message like:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">message DealCards_S2C&#123;
    repeated uint32 cards = 1;
    uint32 seat_number = 2;
&#125;</code><!-- HTML_TAG_END --></pre>
<p>Then, generate our own <code>.js</code> file.</p>
<p>As the episode3 demo show, run command bellow in directory proto.</p>
<ul><li><p>Windows</p>
<code>.\protoc.exe --js_out=import_style=commonjs,binary:out
card-game.proto</code></li>
<li><p>MacOS</p>
<code>./protoc --js_out=import_style=commonjs,binary:out
card-game.proto</code></li></ul>
<p>Now, we have our own <code>.js</code> file from the <code>.proto</code> in which
we define message.</p>
<p>Let’s encoding and decoding message with protocol buffers.</p>
<p>Encoding: &gt;enum Cmd is used to map message type here</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">function encodeData(cmd, data) &#123;
    let _proto_struct_obj;
    switch (cmd) &#123;
        case card_game_pb.Cmd.DEALCARDS_S2C:
            _proto_struct_obj = new card_game_pb.DealCards_S2C();
            _proto_struct_obj.setCardsList(data.cards);
            _proto_struct_obj.setSeatNumber(data.seatNumber);
            break;
        case card_game_pb.Cmd.PLAYCARDS_S2C:
            _proto_struct_obj = new card_game_pb.PlayCards_S2C();
            _proto_struct_obj.setCardsList(data.cards);
            _proto_struct_obj.setSeatNumber(data.seatNumber);
            break;
        case card_game_pb.Cmd.ILLEGALCARDS_S2C:
            _proto_struct_obj = new card_game_pb.IllegalCards_S2C();
            _proto_struct_obj.setSeatNumber(data.seatNumber);
            break;
        case card_game_pb.Cmd.GAMEEND_S2C:
            _proto_struct_obj = new card_game_pb.GameEnd_S2C();
            _proto_struct_obj.setSeatNumber(data.seatNumber);
            break;
        case card_game_pb.Cmd.PLAYTURN_S2C:
            _proto_struct_obj = new card_game_pb.PlayTurn_S2C();
            _proto_struct_obj.setHandCardsList(data.handCards);
            _proto_struct_obj.setSeatNumber(data.seatNumber);
            break;
        default:
            console.log(&quot;no message matched.&quot;)
    &#125;
    if (_proto_struct_obj) &#123;
        let _mainMsg = new card_game_pb.MainMessage();
        _mainMsg.setCmdId(cmd);
        let _data = _proto_struct_obj.serializeBinary();
        _mainMsg.setData(_data);
        let _completeData = _mainMsg.serializeBinary();
        return _completeData;
    &#125;
    return null;
&#125;</code><!-- HTML_TAG_END --></pre>
<p>Decoding: &gt;enum Cmd is used to map message type here</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">function decodeData(buffer) &#123;
    let _mainMsg = card_game_pb.MainMessage.deserializeBinary(buffer);
    let _cmd = _mainMsg.getCmdId();
    let _bytesData = _mainMsg.getData();
    let _data;
    switch (_cmd) &#123;
        case card_game_pb.Cmd.READY_C2S:
            _data = card_game_pb.Ready_C2S.deserializeBinary(_bytesData);
            _data = &#123;
                seatNumber: _data.getSeatNumber()
            &#125;
            if (_this.ready_C2S) _this.ready_C2S(_data);
            break;
        case card_game_pb.Cmd.PLAYCARDS_C2S:
            _data = card_game_pb.PlayCards_C2S.deserializeBinary(_bytesData);
            _data = &#123;
                cards: _data.getCardsList(),
                seatNumber: _data.getSeatNumber()
            &#125;
            if (_this.playCards_C2S) _this.playCards_C2S(_data);
            break;
        case card_game_pb.Cmd.COMPETEFORLANDLORDROLE_C2S:
            _data = card_game_pb.CompeteForLandLordRole_C2S.deserializeBinary(_bytesData);
            _data = &#123;
                score: _data.getScore(),
                seatNumber: _data.getSeatNumber()
            &#125;
            if (_this.competeForLandLordRole_C2S) _this.competeForLandLordRole_C2S(_data);
            break;
        default:
            console.log(&quot;no message matched.&quot;)
    &#125;
&#125;</code><!-- HTML_TAG_END --></pre>
<blockquote><p>Caution:</p>
<ol><li>Attributes defined as <strong>seat_number</strong> in <code>.proto</code> file should be
call like getSeatNumber and setSeatNumebr.</li>
<li>Attributes defined as <strong>repeated</strong> type in <code>.proto</code> should call
getAttributeNameList and setAttributeList instead of the attribute self
name.</li></ol></blockquote>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//prior-knowledge-for-episode-2</guid>
          <title>Prior Knowledge For Episode 2</title>
          <description>Prior Knowledge For Episode 2</description>
          <link>https://sveltekit-static-blog-template.vercel.app//prior-knowledge-for-episode-2</link>
          <pubDate>Tue, 16 Feb 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//prior-knowledge-for-episode-2">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="prior-knowledge-for-episode-2"><a class="heading-link" title="Permalink" aria-hidden="true" href="#prior-knowledge-for-episode-2"><span>#</span></a>Prior Knowledge For Episode 2</h2>
<p>Before episode 2, we’d better to know the rule of the game we are going to make.</p>
<blockquote><p>Background story:</p></blockquote>
<blockquote><p>In the old days in China, the rich and powerful landowners oppressed the
farmers who work hard on the land, threatened the villagers . In order to gave
full vent to their hate, the farmers invent the “Fighting the Landlords”.</p></blockquote>
<blockquote><p>At the beginning, the landlords were given three more cards to highlight the
domineering of the landlords, while the farmers Use two-on-one to express the
psychology of winning by teamwork.</p></blockquote>
<ol><li><p>Basic Rules The landlord is on one side, and the other two players are on the
farmer side. The game ends when any player finishes playing cards. There are
54 cards in total. After the game starts, each of the 3 players is dealt 17
cards, and the remaining 3 cards are the landlord cards.</p></li>
<li><p>The brand</p>
<ul><li>Spring: After the landlord has played all the cards, and the peasants have
not played a single card, it is spring.</li>
<li>Anti-Spring: After the landlord plays the first hand of cards, the farmer
controls it, and until the farmer finishes playing the hand, the landlord
has not played a card, that is, the anti-spring.</li>
<li>Double: After confirming the landlord again, both the landlord and the
peasant can freely choose to double or not to double, and if they choose to
double, the multiple will be x 2 (if both of them choose double, the
multiple will be x 4).</li>
<li>King Fried: That is, the double king is in hand, and the card type is the
largest card type and can press any card type.</li>
<li>Bomb: Four cards of the same rank are bomb cards. For example: 4444.</li>
<li>Single: A single card.</li>
<li>Pair: Two cards of the same value.</li>
<li>Three Cards: Three cards of the same rank.</li>
<li>Three with one: Three cards of the same rank + any single card. For
example: 333+4.</li>
<li>Three with two: Three cards of the same rank + a pair of cards. For
example: 333+44.</li>
<li>Four with two: Four cards of the same rank + any two cards. For example:
3333+4+5 or 3333+44.</li>
<li>Straight: A single card with five or more consecutive points, 2 and the
king cannot be linked. For example: 34567.</li>
<li>Connected Pair: Three or more consecutive pairs of cards, 2 and king cannot
be connected. For example: 334455.</li>
<li>Airplane: Two or more adjacent three cards, 2 and the king cannot be
connected. For example 333444.</li>
<li>Airplane with wings: Plane + the same number of singles or pairs. For
example: 333444+5+6 or 333444+55+66.</li></ul></li>
<li><p>Multiples</p>
<ul><li>Bomb (King Bomb): x2</li>
<li>Spring: x2</li>
<li>Anti-spring: x2</li>
<li>Pair, Flush, King: x2</li>
<li>Double king and straight in the hole card: x3</li>
<li>A straight flush, three cards in the hole card: x4</li></ul></li>
<li><p>Game Rules</p>
<ul><li>The system randomly selects a player to call the landlord first, and then
the other 2 will grab the landlord or not.</li>
<li>When calling the landlord, you can choose not to call or call the landlord.
After someone calls the landlord, you can rob the landlord. Call the
landlord multiples of 1, 2, and 3 times, and the first to grab 3 times is
the landlord.</li>
<li>After confirming the landlord, the three hole cards are shown and the
landlord gets the last three hole cards.</li>
<li>In the card playing stage, when it is your turn to press the card, you can
freely choose not to play or play a higher card than the previous player.</li>
<li>The game ends when any farmer player finishes playing cards, and 2 peasants
win. If the landlord have finished playing cards, the game ends and the
landlord wins.</li></ul></li></ol>
<p>Fighting the Landlord itself is a strategic game. As a landlord, you must
understand the advantages of your three cards. As a farmer, when your own
advantages are insufficient, you must choose to cooperate in a group.
Opportunity to defeat the landlord to win.</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//play-cards-in-terminal-with-bots-e2</guid>
          <title>Play cards in terminal with bots - Episode 2</title>
          <description>Play cards in terminal with bots</description>
          <link>https://sveltekit-static-blog-template.vercel.app//play-cards-in-terminal-with-bots-e2</link>
          <pubDate>Tue, 09 Feb 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//play-cards-in-terminal-with-bots-e2">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="make-a-multiplayer-card-game---episode-2--play-cards-in-terminal-with-bots"><a class="heading-link" title="Permalink" aria-hidden="true" href="#make-a-multiplayer-card-game---episode-2--play-cards-in-terminal-with-bots"><span>#</span></a>Make a multiplayer card game - Episode 2 | Play cards in terminal with bots</h2>
<blockquote><p>Before the tech content, I can’t help but express my feeling after writing my
first blog post.</p></blockquote>
<blockquote><p>I have learned a lot from writing blog. I will never understand the benefits
contained in it before I wrote the first blog.</p></blockquote>
<blockquote><p>The output of the content will prompt you to review the known knowledge. In
the process of reviewing the known knowledge, you will comprehend new
cognition from the old knowledge by sorting out and summarizing the knowledge.
In order to make it easier for readers to understand, you will understand the
previously vague knowledge points by learning new knowledge.</p></blockquote>
<blockquote><p>At the same time, I began to understand the author’s gratitude to his family
in the preface of the book. Content output is a time-consuming and
labor-intensive thing that requires a high degree of concentration.</p></blockquote>
<blockquote><p>If you are a developer and have not started your own blog writing, it is
recommended to start now, no matter the content is good or bad, take the first
step and feel the magical power of the output of the content.</p></blockquote>
<p>Based on the server and client we had create in the previous episode, we
concentrate on the logic of game process flow this time. For easy understanding,
we ignore some process such as calculating score which we will supplement in the
multi player version.</p>
<p>First of all, have a look at the new directory structure:</p>
<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645975508993/Svw37SWa5.png" alt="Screen Shot 2022-02-27 at 23.24.54.png"></p>
<p>As we can see above, we add a directory named share, which will be use by both
client and server.</p>
<code>helper.js for common logic.</code>
<code>proto.js for message definitions.</code>
<code>rule-checker.js for rule of our card game &quot;Doudizhu&quot;.</code>
<ol><li>Define messages between client and server.</li></ol>
<p>share/proto.js:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">function generateEnum(protoArr) &#123;
    let _enum = &#123;&#125;;
    for (let i = 0; i &lt; protoArr.length; i++) &#123;
        const _protoName = protoArr[i];
        const _cmdID = i;
        _enum[_enum[_protoName] = _cmdID] = _protoName;
    &#125;
    return _enum;
&#125;

const ENUM_CMD_FN = generateEnum(
    [
        &quot;ready_C2S&quot;,
        &quot;dealCards_S2C&quot;,
        &quot;competeForLandLordRole_C2S&quot;,
        &quot;playTurn&quot;,
        &quot;playCards_C2S&quot;,
        &quot;playCards_S2C&quot;,
        &quot;notAllowedByRule_S2C&quot;,
        &quot;gameEnd_S2C&quot;
    ]);

module.exports = &#123; ENUM_CMD_FN: ENUM_CMD_FN &#125;</code><!-- HTML_TAG_END --></pre>
<p>The codes above create a enum like structure, which make the communication
intuitive. We define the function in client and server with the same name
created in it.</p>
<p>We encode message by the cmdID. server/index.js:</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">function encodeData(cmd, data)&#123;
    let _header = Buffer.alloc(1);
    _header.writeUInt8(cmd);
    let _body = Buffer.from(JSON.stringify(data));
    const _dataBuffer = Buffer.concat([_header, _body]);
    return _dataBuffer;
&#125;</code><!-- HTML_TAG_END --></pre>
<p>And decode message by cmdID to find the function to execute. server/index.js</p>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">function decodeData(data) &#123;
    let _cmd = data.readUInt8();
    let _body = JSON.parse(data.slice(1));
    const _funcName = ENUM_CMD_FN[_cmd];
    if (_funcName &amp;&amp; typeof _this[_funcName] == &quot;function&quot;) _this[_funcName](_body);
&#125;</code><!-- HTML_TAG_END --></pre>
<blockquote><p>Caution: the function called through _this[_funcName] must be define as:</p></blockquote>
<pre class="language-undefined"><!-- HTML_TAG_START --><code class="language-undefined">this.dealCards_S2C = function (data) &#123;
    let _cards = data.cards;
    mCardsArr = sortByValue(_cards);
    let _myHandCardsShowArr = convert2ReadableNames(mCardsArr);
    console.log(&#39;Deal cards complete, your seat number is-&gt; &#39;, data.seatNumber, &#39;your cards-&gt;&#39;, _myHandCardsShowArr.join(&#39;,&#39;));
    console.log(&#39;Select a score to confirm role (you can input 1|2|3, the one who select the biggest number will be the land lord, and the base score is the selected number.): &#39;);
    const _score = getInputFromCmd();
    this.competeForLandLordRole_C2S(_score);
&#125;</code><!-- HTML_TAG_END --></pre>
<blockquote><p>define like function dealCards_S2C(), can not be found.</p></blockquote>
<p>The key point of this episode is all above, other codes are all about the game
process flow and rules which has introduce in my
<a href="https://lizhiyu.me/prior-knowledge-for-episode-2" rel="nofollow">previous post</a>. If you has
interest in this game, please clone the demo and play with the bots.</p>
<p>The complete demo can be found on:
<a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode2" rel="nofollow">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode2</a></p>
<p>Any problems, discussion is welcome.</p>
<p><strong>In the next episode, we will add the
<a href="https://github.com/protocolbuffers/protobuf" rel="nofollow">protobuf.js</a> which is most popular
in game development to define our messages between client and server.</strong></p>
<p>Thanks for your reading.</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//create-a-simple-server-and-client-from-scratch-e1</guid>
          <title>Make a multiplayer card game - Episode 1</title>
          <description>Create a simple server and client from scratch</description>
          <link>https://sveltekit-static-blog-template.vercel.app//create-a-simple-server-and-client-from-scratch-e1</link>
          <pubDate>Tue, 02 Feb 2021 05:55:15 +0800</pubDate>
          <category>Tutorial:Make a multiplayer card game</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//create-a-simple-server-and-client-from-scratch-e1">
                  read on the site!
                </a>
              </strong>
            </div>

            <h2 id="make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch"><a class="heading-link" title="Permalink" aria-hidden="true" href="#make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch"><span>#</span></a>Make a multiplayer card game - Episode 1 | Create a simple server and client from scratch</h2>
<p>In the coming weeks, I’ll be updating a series of tutorials on making a
multiplayer online card games base on the rule of the most popular Chinese card
game “Doudizhu”, which means battle with landlord. I divide this series in many
small part to make it easy for most friends. If you know a little javascript,
all the better.</p>
<p>Parts including:</p>
<ul><li>create a simple server and client</li>
<li>play cards in terminal with bots</li>
<li>communicate with server by protobuf</li>
<li>play cards in terminal with other players</li>
<li>create 2D graphical interface with Cocos Creator</li>
<li>create 2D graphical interface with React</li>
<li>create 3D graphical interface with Three.js</li>
<li>add physical lib ammo.js to add a tiny game</li>
<li>connect to Web3 world</li></ul>
<p><em>open your terminal, input <code>node -v</code>, if something go wrong, please install
node.js first <a href="Link">https://nodejs.org</a>.</em></p>
<p>directory structure :
<img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644775769474/2OAtz4Ljw.jpeg" alt="demo0-document-tree.jpg"></p>
<p>create a server, server/index.js:</p>
<div class="code-block svelte-1pkpsrg">
	
	<pre class="language-ts"><!-- HTML_TAG_START --><code class="language-ts"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">handlerData</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">handlerData</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">send</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"msg"</span><span class="token operator">:</span> <span class="token string">"Welcome, friend."</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> bufferData <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server listening on 127.0.0.1:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><!-- HTML_TAG_END --></pre>
</div>
<p>create client, client/index.js:</p>
<div class="code-block svelte-1pkpsrg">
	
	<pre class="language-ts"><!-- HTML_TAG_START --><code class="language-ts"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net</span><span class="token punctuation">.</span><span class="token function">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> onConnected<span class="token punctuation">)</span><span class="token punctuation">;</span>

socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> bufferData <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">"msg"</span><span class="token operator">:</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code><!-- HTML_TAG_END --></pre>
</div>
<p>run :</p>
<p><code>cd server</code></p>
<p><code>node index.js</code></p>
<p><code>cd client</code></p>
<p><code>node index.js</code></p>
<p>result:</p>
<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1644776034549/t-Jir1j9R.png" alt="demo0-cmd-result.png"></p>
<p>This episode is end here, the complete demo can be found on
<a href="https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode1" rel="nofollow">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode1</a></p>
<p>Any problems, discussion is welcome.</p>
<p><strong>In the next section, we will add the logic of Doudizhu game, and you will have
completed a playable game in your terminal. </strong></p>
<p>Thanks for your reading.</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//customization</guid>
          <title>How to Customize this Template</title>
          <description>How to customize what you're seeing here and make it your own.</description>
          <link>https://sveltekit-static-blog-template.vercel.app//customization</link>
          <pubDate>Wed, 23 Apr 1997 05:55:27 +0800</pubDate>
          <category>Documentation</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//customization">
                  read on the site!
                </a>
              </strong>
            </div>

            <p>In general, content can be modified by editing the <strong>organisms</strong> and the pages themselves. Below is a list of the most common changes that you may want to make.</p>
<h2 id="domainsite-url"><a class="heading-link" title="Permalink" aria-hidden="true" href="#domainsite-url"><span>#</span></a>Domain/site URL</h2>
<p>The first thing you might want to do is replace the domain of of the site with your own. There are two places where you need to do that:</p>
<ul><li>In the <code>package.json</code> file, check the <code>postbuild</code> script. Change the domain there to your own, so it ends up like this: <code>svelte-sitemap --domain https://your-domain.com</code>. This is used to generate the sitemap of your website, which is used by search engines to index your site.</li>
<li>In the <code>src/lib/data/meta.ts</code> file, change the <code>siteBaseUrl</code> property to your own domain. This is used in multiple parts of the app wherever the site needs to link to itself.</li></ul>
<h2 id="headersite-logo"><a class="heading-link" title="Permalink" aria-hidden="true" href="#headersite-logo"><span>#</span></a>Header/site logo</h2>
<p>To replace the logo that appears in the header, modify or replace the contents of the <code>Logo.svelte</code> atom.</p>
<p>The links that appear on the header can be modified directly in the <code>Header.svelte</code> organism.</p>
<h2 id="hero-section"><a class="heading-link" title="Permalink" aria-hidden="true" href="#hero-section"><span>#</span></a>Hero section</h2>
<p>The hero section is the first section of the site’s home page. It is composed of a Heading, the <em>intro</em> text, and a list of buttons/CTAs. The contents of this section can be modified directly in the <code>Hero.svelte</code> organism.</p>
<h2 id="about-section"><a class="heading-link" title="Permalink" aria-hidden="true" href="#about-section"><span>#</span></a>About section</h2>
<p>The about section contains another headline, a paragraph of text, some social media links, and optionally an image. The contents of this section can be modified directly in the <code>About.svelte</code> organism.</p>
<h2 id="social-links"><a class="heading-link" title="Permalink" aria-hidden="true" href="#social-links"><span>#</span></a>Social Links</h2>
<p>The social links are contained in the <code>Socials.svelte</code> molecule and can be used in any page. This template shows them on the About section and in the Footer.</p>
<h2 id="footer"><a class="heading-link" title="Permalink" aria-hidden="true" href="#footer"><span>#</span></a>Footer</h2>
<p>The footer contains some credits, a list of social links, and the RSS/Theme toggle. The contents of this section can be modified directly in the <code>Footer.svelte</code> organism.</p>
<h2 id="colors"><a class="heading-link" title="Permalink" aria-hidden="true" href="#colors"><span>#</span></a>Colors</h2>
<p>You can change the color palette of the website just by tweaking the <code>_themes.scss</code> file. The file uses the <code>define-color</code> scss function to automatically set the color variables in Hex, RGB and HSL formats, so you can choose whichever format you need.</p>
<p>The main theme colors (primary and secondary) have two variants: shade and tint. The shade is a lighter version of the color (darker in dark mode), and the tint should almost match the page’s background, so that in light mode, it’s really bright, and in dark mode, it’s really dark.</p>
<h2 id="fonts"><a class="heading-link" title="Permalink" aria-hidden="true" href="#fonts"><span>#</span></a>Fonts</h2>
<p>This template uses the Inter, Merriweather and Ubuntu Mono font families. You can change the font family by editing the <code>_variables.scss</code> file, and the code is already set up to accept a default font, a heading font, and a monospace font.</p>
<p>I recommend using <a href="https://fontsource.org/" rel="nofollow">Fontsource</a> to import the fonts you need, or self-hosting them. In case you’re using Fontsource, you can import the fonts in <code>global.scss</code> file to make sure they’re available in the entire site.</p>
<h2 id="favicon"><a class="heading-link" title="Permalink" aria-hidden="true" href="#favicon"><span>#</span></a>Favicon</h2>
<p>Favicons are located in the <code>static/favicons</code> folder. I like to use <a href="https://realfavicongenerator.net" rel="nofollow">Real Favicon Generator</a> to generate mine, but you can use any other tool you like. I wrote <a href="https://fantinel.dev/fixing-favicons" rel="nofollow">a blog post about Favicons</a> in case you want to learn more about them.</p>
<h2 id="social-media-link-preview"><a class="heading-link" title="Permalink" aria-hidden="true" href="#social-media-link-preview"><span>#</span></a>Social Media Link Preview</h2>
<p>You probably want to customize how links to your website look when posted on social media/messaging apps. To do that, you can edit the info in <code>src/lib/data/meta.ts</code>. There, you can edit the site’s title, description, tags (used by search engines) and the image that appears when sharing a link.</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/customization.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/customization.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//project-structure</guid>
          <title>Project Structure</title>
          <description>How code and structure are organized.</description>
          <link>https://sveltekit-static-blog-template.vercel.app//project-structure</link>
          <pubDate>Wed, 23 Apr 1997 05:55:21 +0800</pubDate>
          <category>Documentation</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//project-structure">
                  read on the site!
                </a>
              </strong>
            </div>

            <p>This project follows the basic <a href="https://kit.svelte.dev/docs/project-structure" rel="nofollow">SvelteKit structure</a>, with some added conventions to make customization a post-management easier.</p>
<h2 id="components"><a class="heading-link" title="Permalink" aria-hidden="true" href="#components"><span>#</span></a>Components</h2>
<p>The components are organized following the <a href="https://medium.com/@WeAreMobile1st/atomic-design-getting-started-916bc81bad0e" rel="nofollow">Atomic Design</a> principles, albeit somewhat simplified. Components are in the <code>src/lib/components</code> folder, and are organized in the following way:</p>
<h3 id="atoms"><a class="heading-link" title="Permalink" aria-hidden="true" href="#atoms"><span>#</span></a>Atoms</h3>
<p>Atoms are the most basic components, which can be seen as building blocks for other components. They’re small and self-contained, and do only one thing. Examples of atoms are buttons, inputs, and tags.</p>
<h3 id="molecules"><a class="heading-link" title="Permalink" aria-hidden="true" href="#molecules"><span>#</span></a>Molecules</h3>
<p>Molecules are groups of atoms that work together to form a more complex component. Examples of molecules are cards, groups of links, or an alert callout.</p>
<h3 id="organisms"><a class="heading-link" title="Permalink" aria-hidden="true" href="#organisms"><span>#</span></a>Organisms</h3>
<p>Organisms, in this project, are code blocks that represent a section of a page, such as the header, footer and hero section. They can be used directly in a page as a sort of building block, so the page’s code can be as simple as this:</p>
<div class="code-block svelte-1pkpsrg"><div class="filename svelte-1pkpsrg">+page.svelte</div>
	<div class="lang svelte-1pkpsrg">html</div>
	<pre class="language-html"><!-- HTML_TAG_START --><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hero</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>About</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span></code><!-- HTML_TAG_END --></pre>
</div>
<h2 id="component-gallery"><a class="heading-link" title="Permalink" aria-hidden="true" href="#component-gallery"><span>#</span></a>Component Gallery</h2>
<p>This project uses <a href="https://histoire.dev" rel="nofollow">Histoire</a> to be able to see and develop components in isolation. To open it, run <code>npm run story:dev</code>. This way you can customize and build new components with placeholder content and without worrying about where to put them in a page.</p>
<h2 id="pages"><a class="heading-link" title="Permalink" aria-hidden="true" href="#pages"><span>#</span></a>Pages</h2>
<p>Pages obey the default SvelteKit structure, but can be summarized as follows:</p>
<ul><li>There are two different file types: the pages (<code>+page.svelte</code>) and the layouts (<code>+layout.svelte</code>). Layouts are a way to reuse the same structure between different pages without having to duplicate code;</li>
<li>There are two different page layouts in this site: the “Waves” layout, which all pages inside the <code>(waves)</code> folder use, and the “Blog Article” layout, which all pages inside the <code>(blog-article)</code> folder use;</li></ul>
<h2 id="blog-posts"><a class="heading-link" title="Permalink" aria-hidden="true" href="#blog-posts"><span>#</span></a>Blog Posts</h2>
<p>To know how blog posts work and how to create new ones, check out <a href="/blog-posts">How Blog Posts Work</a>.</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/project-structure.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/project-structure.jpg"/>          
        </item>
      
        <item>
          <guid>https://sveltekit-static-blog-template.vercel.app//blog-posts</guid>
          <title>How Blog Posts Work</title>
          <description>How to manage existing blog posts and create new ones</description>
          <link>https://sveltekit-static-blog-template.vercel.app//blog-posts</link>
          <pubDate>Wed, 23 Apr 1997 05:55:15 +0800</pubDate>
          <category>Documentation</category>
          <content:encoded><![CDATA[
            <div style="margin: 50px 0; font-style: italic;">
              If anything looks wrong, 
              <strong>
                <a href="https://sveltekit-static-blog-template.vercel.app//blog-posts">
                  read on the site!
                </a>
              </strong>
            </div>

            <p>All blog posts are located inside the <code>src/routes/(blog-article)</code> folder. Each folder inside it represents a blog post, and each folder has a <code>+page.md</code> file, which is the file that contains the post’s content.</p>
<p>This way, the URL for each blog post is generated with the folder’s name. For example, the folder <code>src/routes/(blog-article)/how-blog-posts-work</code> will generate the URL <code>https://mysite.com/how-blog-posts-work</code>.</p>
<p>All posts are Markdown files, which means you can use the <a href="https://www.markdownguide.org/basic-syntax" rel="nofollow">Markdown syntax</a> in them, and it will work out of the box. However, since this projects uses <a href="https://mdsvex.pngwn.io/" rel="nofollow">MDsveX</a> to parse Markdown, you can also use Svelte components inside them! This means that the components used in other pages can also be used in blog posts.</p>
<div class="callout-block info svelte-sxx0n0"><div class="icon-wrapper svelte-sxx0n0"><svg width="100%" height="100%" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 11.5V16.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12 7.51L12.01 7.49889" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg></div>
	This is a Svelte component inside a Markdown file!

</div>
<h2 id="processing"><a class="heading-link" title="Permalink" aria-hidden="true" href="#processing"><span>#</span></a>Processing</h2>
<p>Besides the blog post page itself, the blog posts can be displayed in other places, such as the <code>/blog</code> page, which lists all blog posts, and the <code>&lt;RecentPosts&gt;</code> component, used in the home page.</p>
<p>To be able to do that, posts are processed in the <code>src/lib/data/blog-posts/index.ts</code> file. That file imports the blog post files and processes them, so we’re able to use some of the post’s metadata to list them. For example, we get the post’s title, cover image, and calculate the reading time based on its content, so that information is displayed in the blog post cards in the <code>/blog</code> page.</p>
<p>There is also some basic logic to get related posts based on a post’s tags. The logic should be straightforward enough to modify it to your needs.</p>
<h2 id="creating-a-new-post"><a class="heading-link" title="Permalink" aria-hidden="true" href="#creating-a-new-post"><span>#</span></a>Creating a new post</h2>
<p>To create a new post, create a new folder inside the <code>src/routes/(blog-article)</code> folder, and inside it, create a <code>+page.md</code> file. The folder name will be used as the post’s URL slug, so make sure it’s a valid URL slug.</p>
<p>Inside the <code>+page.md</code> file, you must start with the front matter, which is a YAML-like syntax that is used to define metadata for the post. The front matter must be the first thing in the file, and must be separated from the rest of the content by three dashes (<code>---</code>). An example of a front matter is:</p>
<div class="code-block svelte-1pkpsrg">
	<div class="lang svelte-1pkpsrg">markdown</div>
	<pre class="language-md"><!-- HTML_TAG_START --><code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">slug: my-new-blog-post
title: My New Blog Post
date: 2023-04-22T20:45:25.350Z
excerpt: A short description of the post
coverImage: /images/posts/cover-image.jpg
tags:
  - Example</span>
<span class="token punctuation">---</span></span></code><!-- HTML_TAG_END --></pre>
</div>
<h2 id="managing-blog-posts"><a class="heading-link" title="Permalink" aria-hidden="true" href="#managing-blog-posts"><span>#</span></a>Managing blog posts</h2>
<p>I highly recommend the <a href="https://frontmatter.codes/" rel="nofollow">Front Matter VS Code extension</a> to manage blog posts. It gives you a nice CMS-like UI to manage the front matter of all blog posts, as well as a preview of their content. It is, of course, optional, and you can manage everything directly in the Markdown files if you prefer.</p>
<img srcset="/images/posts/frontmatter-preview-dashboard.avif, /images/posts/frontmatter-preview-dashboard.webp, /images/posts/frontmatter-preview-dashboard.png" src="/images/posts/frontmatter-preview-dashboard.png" alt="Screenshot of the Front Matter VS Code extension, showing the dashboard with all posts" loading="lazy" decoding="async" class="svelte-1ykl0dj full-bleed">
<img srcset="/images/posts/frontmatter-preview-edit.avif, /images/posts/frontmatter-preview-edit.webp, /images/posts/frontmatter-preview-edit.png" src="/images/posts/frontmatter-preview-edit.png" alt="Screenshot of the Front Matter VS Code extension, showing the post editing UI" loading="lazy" decoding="async" class="svelte-1ykl0dj full-bleed">
<h2 id="rss"><a class="heading-link" title="Permalink" aria-hidden="true" href="#rss"><span>#</span></a>RSS</h2>
<p>This template automatically generates a RSS feed of your blog posts. It is generated in the <code>src/routes/rss.xml/+server.ts</code> file, and it is available at the <code>/rss.xml</code> URL.</p>
          ]]></content:encoded>
          <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>
          <media:content xmlns:media="http://search.yahoo.com/mrss/" medium="image" url="https://sveltekit-static-blog-template.vercel.app///images/posts/blog-posts.jpg"/>          
        </item>
      
  </channel>
</rss>