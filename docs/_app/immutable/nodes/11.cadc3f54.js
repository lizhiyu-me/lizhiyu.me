import{S as oa,i as ca,s as la,k as e,q as l,a as u,y as Xs,l as p,m as o,r as i,h as s,c as r,z as Ys,n as h,Q as Zs,b as c,G as a,A as na,g as sa,d as aa,B as ta,M as pa}from"../chunks/index.039744db.js";import{C as ea}from"../chunks/CodeBlock.26022daa.js";function ia(J){let k,v=`<code class="language-ts"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">handlerData</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">handlerData</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">send</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"msg"</span><span class="token operator">:</span> <span class="token string">"Welcome, friend."</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> bufferData <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server listening on 127.0.0.1:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`;return{c(){k=e("pre"),this.h()},l(m){k=p(m,"PRE",{class:!0});var _=o(k);_.forEach(s),this.h()},h(){h(k,"class","language-ts")},m(m,_){c(m,k,_),k.innerHTML=v},p:pa,d(m){m&&s(k)}}}function ua(J){let k,v=`<code class="language-ts"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net</span><span class="token punctuation">.</span><span class="token function">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  host<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> onConnected<span class="token punctuation">)</span><span class="token punctuation">;</span>

socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> bufferData <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string-property property">"msg"</span><span class="token operator">:</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(m){k=p(m,"PRE",{class:!0});var _=o(k);_.forEach(s),this.h()},h(){h(k,"class","language-ts")},m(m,_){c(m,k,_),k.innerHTML=v},p:pa,d(m){m&&s(k)}}}function ra(J){let k,v,m,_,xn,ln,g,Ln,un,j,Mn,rn,f,W,On,zn,Q,Sn,Tn,U,An,qn,F,Gn,Rn,K,Nn,Bn,V,Hn,Jn,X,Wn,Qn,Y,Un,Fn,Z,Kn,kn,D,y,Vn,nn,Xn,Yn,I,Zn,ns,fn,b,ss,C,vs,dn,x,as,mn,w,hn,L,ts,vn,E,_n,M,es,yn,O,sn,ps,wn,z,an,os,En,S,tn,cs,bn,T,en,ls,$n,A,is,Pn,q,G,_s,gn,$,us,P,rs,jn,R,ks,Dn,N,pn,fs,In,B,ds,Cn;return w=new ea({props:{$$slots:{default:[ia]},$$scope:{ctx:J}}}),E=new ea({props:{$$slots:{default:[ua]},$$scope:{ctx:J}}}),{c(){k=e("h2"),v=e("a"),m=e("span"),_=l("#"),xn=l("Make a multiplayer card game - Episode 1 | Create a simple server and client from scratch"),ln=u(),g=e("p"),Ln=l(`In the coming weeks, I’ll be updating a series of tutorials on making a
multiplayer online card games base on the rule of the most popular Chinese card
game “Doudizhu”, which means battle with landlord. I divide this series in many
small part to make it easy for most friends. If you know a little javascript,
all the better.`),un=u(),j=e("p"),Mn=l("Parts including:"),rn=u(),f=e("ul"),W=e("li"),On=l("create a simple server and client"),zn=u(),Q=e("li"),Sn=l("play cards in terminal with bots"),Tn=u(),U=e("li"),An=l("communicate with server by protobuf"),qn=u(),F=e("li"),Gn=l("play cards in terminal with other players"),Rn=u(),K=e("li"),Nn=l("create 2D graphical interface with Cocos Creator"),Bn=u(),V=e("li"),Hn=l("create 2D graphical interface with React"),Jn=u(),X=e("li"),Wn=l("create 3D graphical interface with Three.js"),Qn=u(),Y=e("li"),Un=l("add physical lib ammo.js to add a tiny game"),Fn=u(),Z=e("li"),Kn=l("connect to Web3 world"),kn=u(),D=e("p"),y=e("em"),Vn=l("open your terminal, input "),nn=e("code"),Xn=l("node -v"),Yn=l(`, if something go wrong, please install
node.js first `),I=e("a"),Zn=l("https://nodejs.org"),ns=l("."),fn=u(),b=e("p"),ss=l(`directory structure :
`),C=e("img"),dn=u(),x=e("p"),as=l("create a server, server/index.js:"),mn=u(),Xs(w.$$.fragment),hn=u(),L=e("p"),ts=l("create client, client/index.js:"),vn=u(),Xs(E.$$.fragment),_n=u(),M=e("p"),es=l("run :"),yn=u(),O=e("p"),sn=e("code"),ps=l("cd server"),wn=u(),z=e("p"),an=e("code"),os=l("node index.js"),En=u(),S=e("p"),tn=e("code"),cs=l("cd client"),bn=u(),T=e("p"),en=e("code"),ls=l("node index.js"),$n=u(),A=e("p"),is=l("result:"),Pn=u(),q=e("p"),G=e("img"),gn=u(),$=e("p"),us=l(`This episode is end here, the complete demo can be found on
`),P=e("a"),rs=l("https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode1"),jn=u(),R=e("p"),ks=l("Any problems, discussion is welcome."),Dn=u(),N=e("p"),pn=e("strong"),fs=l(`In the next section, we will add the logic of Doudizhu game, and you will have
completed a playable game in your terminal.`),In=u(),B=e("p"),ds=l("Thanks for your reading."),this.h()},l(n){k=p(n,"H2",{id:!0});var t=o(k);v=p(t,"A",{class:!0,title:!0,"aria-hidden":!0,href:!0});var on=o(v);m=p(on,"SPAN",{});var cn=o(m);_=i(cn,"#"),cn.forEach(s),on.forEach(s),xn=i(t,"Make a multiplayer card game - Episode 1 | Create a simple server and client from scratch"),t.forEach(s),ln=r(n),g=p(n,"P",{});var ys=o(g);Ln=i(ys,`In the coming weeks, I’ll be updating a series of tutorials on making a
multiplayer online card games base on the rule of the most popular Chinese card
game “Doudizhu”, which means battle with landlord. I divide this series in many
small part to make it easy for most friends. If you know a little javascript,
all the better.`),ys.forEach(s),un=r(n),j=p(n,"P",{});var ws=o(j);Mn=i(ws,"Parts including:"),ws.forEach(s),rn=r(n),f=p(n,"UL",{});var d=o(f);W=p(d,"LI",{});var Es=o(W);On=i(Es,"create a simple server and client"),Es.forEach(s),zn=r(d),Q=p(d,"LI",{});var bs=o(Q);Sn=i(bs,"play cards in terminal with bots"),bs.forEach(s),Tn=r(d),U=p(d,"LI",{});var $s=o(U);An=i($s,"communicate with server by protobuf"),$s.forEach(s),qn=r(d),F=p(d,"LI",{});var Ps=o(F);Gn=i(Ps,"play cards in terminal with other players"),Ps.forEach(s),Rn=r(d),K=p(d,"LI",{});var gs=o(K);Nn=i(gs,"create 2D graphical interface with Cocos Creator"),gs.forEach(s),Bn=r(d),V=p(d,"LI",{});var js=o(V);Hn=i(js,"create 2D graphical interface with React"),js.forEach(s),Jn=r(d),X=p(d,"LI",{});var Ds=o(X);Wn=i(Ds,"create 3D graphical interface with Three.js"),Ds.forEach(s),Qn=r(d),Y=p(d,"LI",{});var Is=o(Y);Un=i(Is,"add physical lib ammo.js to add a tiny game"),Is.forEach(s),Fn=r(d),Z=p(d,"LI",{});var Cs=o(Z);Kn=i(Cs,"connect to Web3 world"),Cs.forEach(s),d.forEach(s),kn=r(n),D=p(n,"P",{});var xs=o(D);y=p(xs,"EM",{});var H=o(y);Vn=i(H,"open your terminal, input "),nn=p(H,"CODE",{});var Ls=o(nn);Xn=i(Ls,"node -v"),Ls.forEach(s),Yn=i(H,`, if something go wrong, please install
node.js first `),I=p(H,"A",{href:!0});var Ms=o(I);Zn=i(Ms,"https://nodejs.org"),Ms.forEach(s),ns=i(H,"."),H.forEach(s),xs.forEach(s),fn=r(n),b=p(n,"P",{});var ms=o(b);ss=i(ms,`directory structure :
`),C=p(ms,"IMG",{src:!0,alt:!0}),ms.forEach(s),dn=r(n),x=p(n,"P",{});var Os=o(x);as=i(Os,"create a server, server/index.js:"),Os.forEach(s),mn=r(n),Ys(w.$$.fragment,n),hn=r(n),L=p(n,"P",{});var zs=o(L);ts=i(zs,"create client, client/index.js:"),zs.forEach(s),vn=r(n),Ys(E.$$.fragment,n),_n=r(n),M=p(n,"P",{});var Ss=o(M);es=i(Ss,"run :"),Ss.forEach(s),yn=r(n),O=p(n,"P",{});var Ts=o(O);sn=p(Ts,"CODE",{});var As=o(sn);ps=i(As,"cd server"),As.forEach(s),Ts.forEach(s),wn=r(n),z=p(n,"P",{});var qs=o(z);an=p(qs,"CODE",{});var Gs=o(an);os=i(Gs,"node index.js"),Gs.forEach(s),qs.forEach(s),En=r(n),S=p(n,"P",{});var Rs=o(S);tn=p(Rs,"CODE",{});var Ns=o(tn);cs=i(Ns,"cd client"),Ns.forEach(s),Rs.forEach(s),bn=r(n),T=p(n,"P",{});var Bs=o(T);en=p(Bs,"CODE",{});var Hs=o(en);ls=i(Hs,"node index.js"),Hs.forEach(s),Bs.forEach(s),$n=r(n),A=p(n,"P",{});var Js=o(A);is=i(Js,"result:"),Js.forEach(s),Pn=r(n),q=p(n,"P",{});var Ws=o(q);G=p(Ws,"IMG",{src:!0,alt:!0}),Ws.forEach(s),gn=r(n),$=p(n,"P",{});var hs=o($);us=i(hs,`This episode is end here, the complete demo can be found on
`),P=p(hs,"A",{href:!0,rel:!0});var Qs=o(P);rs=i(Qs,"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode1"),Qs.forEach(s),hs.forEach(s),jn=r(n),R=p(n,"P",{});var Us=o(R);ks=i(Us,"Any problems, discussion is welcome."),Us.forEach(s),Dn=r(n),N=p(n,"P",{});var Fs=o(N);pn=p(Fs,"STRONG",{});var Ks=o(pn);fs=i(Ks,`In the next section, we will add the logic of Doudizhu game, and you will have
completed a playable game in your terminal.`),Ks.forEach(s),Fs.forEach(s),In=r(n),B=p(n,"P",{});var Vs=o(B);ds=i(Vs,"Thanks for your reading."),Vs.forEach(s),this.h()},h(){h(v,"class","heading-link"),h(v,"title","Permalink"),h(v,"aria-hidden","true"),h(v,"href","#make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch"),h(k,"id","make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch"),h(I,"href","Link"),Zs(C.src,vs="https://cdn.hashnode.com/res/hashnode/image/upload/v1644775769474/2OAtz4Ljw.jpeg")||h(C,"src",vs),h(C,"alt","demo0-document-tree.jpg"),Zs(G.src,_s="https://cdn.hashnode.com/res/hashnode/image/upload/v1644776034549/t-Jir1j9R.png")||h(G,"src",_s),h(G,"alt","demo0-cmd-result.png"),h(P,"href","https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode1"),h(P,"rel","nofollow")},m(n,t){c(n,k,t),a(k,v),a(v,m),a(m,_),a(k,xn),c(n,ln,t),c(n,g,t),a(g,Ln),c(n,un,t),c(n,j,t),a(j,Mn),c(n,rn,t),c(n,f,t),a(f,W),a(W,On),a(f,zn),a(f,Q),a(Q,Sn),a(f,Tn),a(f,U),a(U,An),a(f,qn),a(f,F),a(F,Gn),a(f,Rn),a(f,K),a(K,Nn),a(f,Bn),a(f,V),a(V,Hn),a(f,Jn),a(f,X),a(X,Wn),a(f,Qn),a(f,Y),a(Y,Un),a(f,Fn),a(f,Z),a(Z,Kn),c(n,kn,t),c(n,D,t),a(D,y),a(y,Vn),a(y,nn),a(nn,Xn),a(y,Yn),a(y,I),a(I,Zn),a(y,ns),c(n,fn,t),c(n,b,t),a(b,ss),a(b,C),c(n,dn,t),c(n,x,t),a(x,as),c(n,mn,t),na(w,n,t),c(n,hn,t),c(n,L,t),a(L,ts),c(n,vn,t),na(E,n,t),c(n,_n,t),c(n,M,t),a(M,es),c(n,yn,t),c(n,O,t),a(O,sn),a(sn,ps),c(n,wn,t),c(n,z,t),a(z,an),a(an,os),c(n,En,t),c(n,S,t),a(S,tn),a(tn,cs),c(n,bn,t),c(n,T,t),a(T,en),a(en,ls),c(n,$n,t),c(n,A,t),a(A,is),c(n,Pn,t),c(n,q,t),a(q,G),c(n,gn,t),c(n,$,t),a($,us),a($,P),a(P,rs),c(n,jn,t),c(n,R,t),a(R,ks),c(n,Dn,t),c(n,N,t),a(N,pn),a(pn,fs),c(n,In,t),c(n,B,t),a(B,ds),Cn=!0},p(n,[t]){const on={};t&1&&(on.$$scope={dirty:t,ctx:n}),w.$set(on);const cn={};t&1&&(cn.$$scope={dirty:t,ctx:n}),E.$set(cn)},i(n){Cn||(sa(w.$$.fragment,n),sa(E.$$.fragment,n),Cn=!0)},o(n){aa(w.$$.fragment,n),aa(E.$$.fragment,n),Cn=!1},d(n){n&&s(k),n&&s(ln),n&&s(g),n&&s(un),n&&s(j),n&&s(rn),n&&s(f),n&&s(kn),n&&s(D),n&&s(fn),n&&s(b),n&&s(dn),n&&s(x),n&&s(mn),ta(w,n),n&&s(hn),n&&s(L),n&&s(vn),ta(E,n),n&&s(_n),n&&s(M),n&&s(yn),n&&s(O),n&&s(wn),n&&s(z),n&&s(En),n&&s(S),n&&s(bn),n&&s(T),n&&s($n),n&&s(A),n&&s(Pn),n&&s(q),n&&s(gn),n&&s($),n&&s(jn),n&&s(R),n&&s(Dn),n&&s(N),n&&s(In),n&&s(B)}}}class da extends oa{constructor(k){super(),ca(this,k,null,ra,la,{})}}export{da as component};
