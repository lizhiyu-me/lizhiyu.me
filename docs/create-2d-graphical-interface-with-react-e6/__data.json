{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"title":2,"slug":3,"coverImage":4,"date":5,"excerpt":6,"tags":7,"html":9,"readingTime":10,"relatedPosts":11},"Make a multiplayer card game - Episode 6 | Create 2D graphical interface with React","create-2d-graphical-interface-with-react-e6","/images/posts/blog-posts.jpg","2021-03-29T21:55:15.361Z","This section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api.",[8],"Tutorial:Make a multiplayer card game","\u003Ch2 id=\"make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react\">\u003Cspan>#\u003C/span>\u003C/a>Make a multiplayer card game - Episode 6 | Create 2D graphical interface with React\u003C/h2>\n\u003Cp>This section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api. The following is an abstracted interface:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">export interface IGameSceneView &#123;\n    getViewComponent(name: string),\n    getNewViewComponent(comp),\n    getChild(childPath, parent),\n    addClickListener(comp, handler, target),\n    setCard(card, name),\n    setLabel(labelComp, text),\n    removeAllChildren(parent),\n    addChild(child, parent),\n    isCardSelected(card),\n    toggleCardSelectedStatus(card),\n    showComponent(comp),\n    hideComponent(comp)\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>Compared with cocos creator, the implementation of react is more operable at the code level. The styles of interface elements are all implemented by handwritten code. The hot-reload that comes with create-react-app also responds to changes very quickly. There is a time to switch editors and wait for the editor to refresh, which is very lightweight.\u003C/p>\n\u003Cp>Code reference \u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\" rel=\"nofollow\">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\u003C/a>\u003C/p>\n\u003Cp>The next article mainly introduces the comparison between cocos creator and react implementation in development.\u003C/p>\n\u003Cp>本节主要是用react实现UI视图。\n在本节之前，已经用cocos creator实现了一个UI视图版本，为了重用基础框架，我们将游戏逻辑进行抽象，并将与视图引擎api相关的逻辑解耦出来。\n下面是抽象出来的一个接口：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">IGameSceneView\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token function\">getViewComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">getNewViewComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">getChild\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>childPath\u003Cspan class=\"token punctuation\">,\u003C/span> parent\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">addClickListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">,\u003C/span> handler\u003Cspan class=\"token punctuation\">,\u003C/span> target\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">setCard\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>card\u003Cspan class=\"token punctuation\">,\u003C/span> name\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">setLabel\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>labelComp\u003Cspan class=\"token punctuation\">,\u003C/span> text\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">removeAllChildren\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>parent\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">addChild\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>child\u003Cspan class=\"token punctuation\">,\u003C/span> parent\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">isCardSelected\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>card\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">toggleCardSelectedStatus\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>card\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">showComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">hideComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>相对于cocos creator，react的实现在代码层面可操作性较强，体现在界面元素的样式都通过手写代码来实现，create-react-app自带的hot-reload也非常快地反馈变更，不会有切换编辑器和等待编辑器刷新的时间，非常轻量的感觉。\u003C/p>\n\u003Cp>代码参考 \u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\" rel=\"nofollow\">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\u003C/a>\u003C/p>\n\u003Cp>下一篇主要介绍cocos creator 与 react 实现在开发上的对比。\u003C/p>","2 min read",[12,19,25],{"title":13,"slug":14,"coverImage":4,"date":15,"excerpt":16,"tags":16,"html":17,"readingTime":18},"从零开始，与BabylonJS一起，开启你的Web3D之旅吧","babylon-trans-1","2021-08-31T21:55:15.361Z",null,"\u003Ch2 id=\"从零开始与babylonjs一起开启你的web3d之旅吧\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#从零开始与babylonjs一起开启你的web3d之旅吧\">\u003Cspan>#\u003C/span>\u003C/a>从零开始，与BabylonJS一起，开启你的Web3D之旅吧\u003C/h2>\n\u003Cp>![Screen Shot 2022-07-22 at 00.33.32.png](\u003Ca href=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1658421252897/Jwqbfh4sf.png\" rel=\"nofollow\">https://cdn.hashnode.com/res/hashnode/image/upload/v1658421252897/Jwqbfh4sf.png\u003C/a> align=“left”)\u003C/p>\n\u003Cblockquote>\u003Cp>欢迎来到 BabylonJS 零基础教程，本教程为萌新导向。无论你是Web开发的专家，富有想象力的设计师，还是充满好奇心的学生，只要你对3D相关的内容感兴趣。本教程都是你学习BabylonJS的绝佳开始，我们强烈建议每一个BabylonJS的初学者都从本教程开始学习。\u003C/p>\u003C/blockquote>\n\u003Cp>本教程将与你一起，在浏览器上打造一个BabylonJS的小项目。你将了解到BabylonJS的演习场（playground），从最基础的引擎核心开始，完成一个可供发布的.html网页文件。\u003C/p>\n\u003Ch3 id=\"演习场playground\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#演习场playground\">\u003Cspan>#\u003C/span>\u003C/a>演习场（playground）\u003C/h3>\n\u003Cp>演习场是你开发BabylonJS程序最重要的工具，注意，没有之一。\u003C/p>\n\u003Cp>![playground.jpeg](\u003Ca href=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1658421347293/kOkoHCp2b.jpeg\" rel=\"nofollow\">https://cdn.hashnode.com/res/hashnode/image/upload/v1658421347293/kOkoHCp2b.jpeg\u003C/a> align=“left”)\u003C/p>\n\u003Cp>在演习场中，你可以随时随地实践你的想法，打造你的实验项目。将代码写入左侧的类似VS Code的编辑界面中，在右侧就能立马运行显示结果。\u003C/p>\n\u003Cp>演习场将是你学习旅途中的贴心小伙伴，因为它提供了全宇宙最科学的循环学习体系，输入代码-&gt;察看结果，让你在反复实践中找到感觉。除此之外，还有一点十分重要，你可以随时保存或分享演习场的内容。这在你学习的过程中遇到问题时变得十分有用，你可以通过\u003Ca href=\"https://forum.babylonjs.com/\" rel=\"nofollow\">Babylon.js 论坛\u003C/a>寻求帮助，官方的开发者和社区工作人员随时为你效劳。\u003C/p>\n\u003Cp>当我们在帮助你解决问题的时候，最好的方法就是你能将问题通过演练场分享出来，这样一来，我们就能快速地定位到问题的关键所在。所以，只要你遇到任何问题，保存你的演练场，分享到论坛。你一定会被我们迅雷不及掩耳的回复速度所震撼。\u003C/p>\n\u003Cp>说了这么多，既然演练场这重要，我们就来实操一下吧。\u003C/p>\n\u003Cp>新建一个页面打开下方链接：\u003C/p>\n\u003Cp>\u003Ca href=\"https://playground.babylonjs.com/\" rel=\"nofollow\">Babylon.js Playground\u003C/a>\u003C/p>\n\u003Ch3 id=\"创建你的第一个场景\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#创建你的第一个场景\">\u003Cspan>#\u003C/span>\u003C/a>创建你的第一个场景\u003C/h3>\n\u003Cp>欢迎来到演习场，你只需要在左边修改/创建代码，就能在右边窗口看见实时运行结果。下面是我们为你提供的一个默认模版场景。快速地瞄一眼代码编辑窗口的绿色注释文字，这些文字会告诉你每一行代码的作用，贴心吧？\u003C/p>\n\u003Cp>最好的学习方法就是在敲代码，边敲边学，边学边敲。\u003C/p>\n\u003Cp>来让我们来尝试给这个默认场景做些调整。\u003C/p>\n\u003Cp>20-24行代码：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">\u003Cspan class=\"token comment\">// Our built-in 'sphere' shape. //引擎内建的球体。\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> sphere \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token constant\">BABYLON\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>MeshBuilder\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">CreateSphere\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"sphere\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>diameter\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> segments\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">32\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> scene\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token comment\">// Move the sphere upward 1/2 its height //将球体移动到它一半高度的位置,上面创建直径设置的是2，所以这里设置位置的y属性指为1\u003C/span>\nsphere\u003Cspan class=\"token punctuation\">.\u003C/span>position\u003Cspan class=\"token punctuation\">.\u003C/span>y \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>选中这几行代码，删掉它！\u003C/p>\n\u003Cp>你已经做出了第一个改动！\u003C/p>\n\u003Cp>感觉还不错吧？\u003C/p>\n\u003Cp>但…等一下，场景当中怎么没有发生任何事情？\u003C/p>\n\u003Cp>因为我们需要在修改了代码之后，需要重新启动演练场才能看到变更结果。\u003C/p>\n\u003Cp>你可以点击启动按钮\u003C/p>\n\u003Cp>![run.jpeg](\u003Ca href=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1658421373423/9YF1Zc_hY.jpeg\" rel=\"nofollow\">https://cdn.hashnode.com/res/hashnode/image/upload/v1658421373423/9YF1Zc_hY.jpeg\u003C/a> align=“left”)\u003C/p>\n\u003Cp>，也可以按组合键\u003Ccode>ALT+ENTER\u003C/code>\u003C/p>\n\u003Cp>场景中的这个球不见了，神奇吧！\u003C/p>\n\u003Cp>\u003Ca href=\"https://playground.babylonjs.com/#2KRNG9\" rel=\"nofollow\">点击查看Playground结果\u003C/a>\u003C/p>\n\u003Cblockquote>\u003Cp>如果你遇到任何问题，可以通过打开链接，对比自己的代码来查找错误\u003C/p>\u003C/blockquote>\n\u003Cp>让我们来做一点别的改动。\u003C/p>\n\u003Cp>找到创建地面的代码所在的行，在下面加上如下代码：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> groundMaterial \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">\u003Cspan class=\"token constant\">BABYLON\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">StandardMaterial\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"Ground Material\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> scene\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nground\u003Cspan class=\"token punctuation\">.\u003C/span>material \u003Cspan class=\"token operator\">=\u003C/span> groundMaterial\u003Cspan class=\"token punctuation\">;\u003C/span>\nground\u003Cspan class=\"token punctuation\">.\u003C/span>material\u003Cspan class=\"token punctuation\">.\u003C/span>diffuseColor \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token constant\">BABYLON\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Color3\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Red\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>再此运行（按组合键ALT+ENTER 或 点击播放按钮）\u003C/p>\n\u003Cp>\u003Ca href=\"https://playground.babylonjs.com/#2KRNG9#1\" rel=\"nofollow\">点击查看Playground结果\u003C/a>\u003C/p>\n\u003Cp>恭喜！你成功创建了一个新的材质，并将材质赋值给了地面，还将材质的漫反射通道设置为红色！\u003C/p>\n\u003Cp>很简单吧？如果你还有点懵也没关系，在这里我们需要知道的就是在左边输入代码，在右边察看结果😀\u003C/p>\n\u003Cp>接下来，让我们来再做第一小改动。\u003C/p>\n\u003Cp>找到这一行代码：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">ground\u003Cspan class=\"token punctuation\">.\u003C/span>material\u003Cspan class=\"token punctuation\">.\u003C/span>diffuseColor \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token constant\">BABYLON\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Color3\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Red\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>用下面两行代码替换掉它：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> groundTexture \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">\u003Cspan class=\"token constant\">BABYLON\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Texture\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>Assets\u003Cspan class=\"token punctuation\">.\u003C/span>textures\u003Cspan class=\"token punctuation\">.\u003C/span>checkerboard_basecolor_png\u003Cspan class=\"token punctuation\">.\u003C/span>rootUrl\u003Cspan class=\"token punctuation\">,\u003C/span> scene\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nground\u003Cspan class=\"token punctuation\">.\u003C/span>material\u003Cspan class=\"token punctuation\">.\u003C/span>diffuseTexture \u003Cspan class=\"token operator\">=\u003C/span> groundTexture\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ca href=\"https://playground.babylonjs.com/#2KRNG9#2\" rel=\"nofollow\">点击查看Playground结果\u003C/a>\u003C/p>\n\u003Cp>恭喜+1！你创建了你的第一个Texture并赋值给了地面材质。\u003C/p>\n\u003Cp>让我们继续，在你所有创建和设置地面相关的代码后面，敲几个回车，留出点空隙来展示演习场提供给我们的大杀器—提示模板。\u003C/p>\n\u003Cp>输入\u003Ccode>import\u003C/code> 你将看到界面上生成了一个列表，列表里边是代码片段，每一个片段都是一个小的功能实现。\u003C/p>\n\u003Cp>让我们选择 \u003Ccode>Import a Mesh w/Callback\u003C/code> ，再按下回车。\u003C/p>\n\u003Cp>如下代码将立即出现在你的输入框里：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">\u003Cspan class=\"token constant\">BABYLON\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>SceneLoader\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">ImportMesh\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"meshName\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"url to the mesh parent directory\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"Mesh filename.fileextension\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> scene\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token keyword\">function\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>newMeshes\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>我们需要在模版代码的基础上做一些小小的润色：\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>1.删掉\u003Ccode>meshName\u003C/code>,注意需要保留引号。\u003C/p>\u003C/li>\n\u003Cli>\u003Cp>2.将\u003Ccode>&quot;url to the mesh parent directory&quot;\u003C/code>（包括双引号） 替换为\u003Ccode>Assets.meshes.Yeti.rootUrl\u003C/code>\u003C/p>\u003C/li>\n\u003Cli>\u003Cp>3.将”Mesh filename.fileextension” （包括双引号）替换为\u003Ccode>Assets.meshes.Yeti.filename\u003C/code>\u003C/p>\u003C/li>\n\u003Cli>\u003Cp>4.在\u003Ccode>BABYLON.SceneLoader.ImportMesh\u003C/code> 这一行下面，在\u003Ccode>&quot;});&quot;\u003C/code>之前，输入：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">newMeshes\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>scaling \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">\u003Cspan class=\"token constant\">BABYLON\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Vector3\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">0.1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0.1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0.1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\u003C/li>\n\u003Cli>\u003Cp>5.运行\u003C/p>\n\u003Cp>\u003Ca href=\"https://playground.babylonjs.com/#2KRNG9#3\" rel=\"nofollow\">点击查看Playground结果\u003C/a>\u003C/p>\u003C/li>\u003C/ul>\n\u003Cp>恭喜+1！你成功创建了一个.gltf格式的动画模型，并调整了它的缩放比例来适配地面。\u003C/p>\n\u003Cp>最后，让我们把创建好的场景动起来，让他跟随我们的鼠标滑动而调整镜头显示内容。\u003C/p>\n\u003Cp>删除5-9行的代码，输入createarc，在提示代码模版列表中选择 \u003Ccode>Create An Arc Rotate Camera w/Degree\u003C/code>。\u003C/p>\n\u003Cp>再次运行，按住鼠标拖动或者触摸拖动场景，相机的视角就会跟随你的拖动和滑动变化啦。\u003C/p>\n\u003Cblockquote>\u003Cp>本篇为翻译BabylonJS官方教程的开始,后续将陆续更新相关系列文章\u003C/p>\u003C/blockquote>\n\u003Cp>\u003Ca href=\"https://doc.babylonjs.com/journey/theFirstStep\" rel=\"nofollow\">原文链接\u003C/a>\u003C/p>","8 min read",{"title":20,"slug":21,"coverImage":4,"date":22,"excerpt":16,"tags":16,"html":23,"readingTime":24},"熟悉熟悉官方文档，逐步深入Babylon.js","babylon-trans-2","2021-09-08T21:55:15.361Z","\u003Ch3 id=\"文档的组织结构\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#文档的组织结构\">\u003Cspan>#\u003C/span>\u003C/a>文档的组织结构\u003C/h3>\n\u003Chr>\n\u003Cp>通过前一篇文章的了解，我们会对Babylon.js有了一个大致的了解，整个文档主要是想带你逐步深入掌握这个Babylon.js所提供的所有内容。\n内容主要分为一个概览和9个主要部分，这些部分包含章节，还有API详解和强大的文档和playground搜索功能。\u003C/p>\n\u003Cp>- 1.Babylon.js特性 -\nBabylon.js是一个功能完备的游戏和渲染引擎，具有广泛的特性。这个部分将带你了解这些特性，并帮助你编码和使用它们。\\\n- 2.将Babylon.js添加到你的Web项目中 -\n有多种方式可以在你的web应用中使用Babylon.js并设置Babylon.js项目。通过这个部分内容，你能了解到如何轻松地将Babylon.js融入自己的项目，并打造出别具一格的产品，并且还为你提供一些项目模板和支持。\\\n- 3.Playground -\n对Babylon.js的核心资源进行详细的查看，了解如何使用它以及它所提供的许多功能设施，包括搜索所有playground以查找其他人所做的示例（这一点真心觉得很棒）。\\\n- 4.工具和资源 -\nBabylon.js有许多令人难以置信的工具，使开发过程简单而愉快。它还有几个内容库供你完全免费使用。这个部分将帮助你理解并利用他们。\\\n- 5.为Babylon.js准备素材 -\n从模型和动画，到纹理，LUTS和HDR图像，在这个部分学习准备Babylon.js内容的工作流和方法。\\\n- 6.Babylon.js跨平台 -\n在这个部分，你将学习如何扩展Babylon.js，并使用它开发几乎任何你能想象的平台的原生应用。\\\n- 7.贡献 -\n对于那些想要扩展Babylon.js边界的人，这个部分描述了需要什么以及如何为Babylon.js的代码库和文档做出贡献。\\\n- 8.引导式学习 -\n有时候边做边学是最好的。这个部分帮助你做到这一点。这些逐步的文章和教程将帮助你从社区的一些最好和最聪明的老师那里学习（babylon.js\n社区的维护者似乎是真的闲，有时候很简单甚至看起来有些幼稚的问题都会得到很详细的回答，这一点是真的佩服）。\\\n-9.社区扩展 -\n在这个部分，你将找到由极其有才华和热情的社区构建的对Babylon.js的令人难以置信的资源和扩展。\u003C/p>\n\u003Ch3 id=\"如何去使用文档\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#如何去使用文档\">\u003Cspan>#\u003C/span>\u003C/a>如何去使用文档\u003C/h3>\n\u003Chr>\n\u003Cp>Babylon.js是一个丰富的API，希望尽可能简单地利用GPU的强大功能来提升浏览器的上网体验。你可以通过用javascript或typescript编写Babylon.js场景代码来利用这个强大的API。为了保持一致性并最大化文档的可访问性，这些页面中找到的所有示例代码都将用javascript提供。\u003C/p>\n\u003Cp>文档页面布局有几个特性，你需要了解这些特性，以便在学习旅程中获得最大的收益。\n首先，最左边的面板是导航窗格。这个窗格是你导航到想去的地方的方式。\u003C/p>\n\u003Cp>![Navigation Pane](\u003Ca href=\"https://doc.babylonjs.com/img/home/home1.jpg\" rel=\"nofollow\">https://doc.babylonjs.com/img/home/home1.jpg\u003C/a> align=“left”)\u003C/p>\n\u003Cp>接下来是内容窗格。它位于中间，包含主要的内容和信息。\u003C/p>\n\u003Cp>![Content Pane](\u003Ca href=\"https://doc.babylonjs.com/img/home/home2.jpg\" rel=\"nofollow\">https://doc.babylonjs.com/img/home/home2.jpg\u003C/a> align=“left”)\u003C/p>\n\u003Cp>一些页面有很多信息，这些信息被组织成子部分。目录窗格使得在较长的页面中导航变得容易。\u003C/p>\n\u003Cp>![Table of Contents](\u003Ca href=\"https://doc.babylonjs.com/img/home/home4.jpg\" rel=\"nofollow\">https://doc.babylonjs.com/img/home/home4.jpg\u003C/a> align=“left”)\u003C/p>\n\u003Cp>右边的面板是示例窗格。它提供了对当前页面上每个playground（实时示例）的快速访问。\u003C/p>\n\u003Cp>![Examples Pane](\u003Ca href=\"https://doc.babylonjs.com/img/home/home3.jpg\" rel=\"nofollow\">https://doc.babylonjs.com/img/home/home3.jpg\u003C/a> align=“left”)\u003C/p>\n\u003Cp>最后，如果你在示例窗格中选择任何一个示例，它将在页面内容顶部的playground窗格内加载该示例。\u003C/p>\n\u003Cp>![Examples Pane](\u003Ca href=\"https://doc.babylonjs.com/img/home/home5.jpg\" rel=\"nofollow\">https://doc.babylonjs.com/img/home/home5.jpg\u003C/a> align=“left”)\u003C/p>\n\u003Ch3 id=\"关于版本控制的说明\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#关于版本控制的说明\">\u003Cspan>#\u003C/span>\u003C/a>关于版本控制的说明\u003C/h3>\n\u003Chr>\n\u003Cp>Babylon.js文档是以Babylon.js的最新主版本为参考编写的。\u003Ca href=\"https://doc.babylonjs.com/typedoc\" rel=\"nofollow\">API 文档\u003C/a>是针对最新的每日构建生成的。\u003C/p>\n\u003Cp>如果你想使用最新版本在本地安装Babylon.js，请从\u003Ca href=\"https://www.npmjs.com/package/@babylonjs/core\" rel=\"nofollow\">npm页面\u003C/a>选择最新的发布版本，然后运行：\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">npm i @babylonjs/core@preview\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>不要对使用最新版本感到害怕。Babylon的npm发布版本被认为是稳定的，并且已经过团队的全面测试。\u003C/p>","6 min read",{"title":26,"slug":27,"coverImage":4,"date":28,"excerpt":29,"tags":30,"html":31,"readingTime":32},"Make a multiplayer card game - Episode 3","change-json-to-protocol-buffers-e3","2021-02-22T21:55:15.361Z","Change JSON to Protocol Buffers",[8],"\u003Ch2 id=\"make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers\">\u003Cspan>#\u003C/span>\u003C/a>Make a multiplayer card game - Episode 3 | Change JSON to Protocol Buffers\u003C/h2>\n\u003Cblockquote>\u003Cp>Protocol buffers are a language-neutral, platform-neutral extensible mechanism\nfor serializing structured data. It has many advantages such as “Lesser in\nSize and Better in Performance”, like this article\n\u003Ca href=\"https://anuragthakur.hashnode.dev/protobuf-why-google-moved-from-json-to-protocol-buffers-ckdxb8sgi03kdjas17ril3fbi\" rel=\"nofollow\">Why Google moved from JSON to Protocol Buffers?\u003C/a>\nintroduce.\u003C/p>\u003C/blockquote>\n\u003Cp>I used it on all the projects I’ve worked on over the years. Besides the better\nperformance, what make me impressed is that the clean communication between\nclient and server with protocol buffers.\u003C/p>\n\u003Cblockquote>\u003Cp>You can clone\n\u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode3\" rel=\"nofollow\">demo for episode3\u003C/a>\nwhich including all the bellow content.\u003C/p>\u003C/blockquote>\n\u003Cp>According to the\n\u003Ca href=\"https://github.com/protocolbuffers/protobuf\" rel=\"nofollow\">official tutorial\u003C/a>, two steps\nshould be done:\u003C/p>\n\u003Col>\u003Cli>Install the runtime library \u003Ccode>google-protobuf\u003C/code>:\u003Ccode>npm install\ngoogle-protobuf\u003C/code>.\u003C/li>\n\u003Cli>Get the Protocol Compiler \u003Ccode>protoc\u003C/code>: download from\n\u003Ca href=\"https://github.com/protocolbuffers/protobuf/releases\" rel=\"nofollow\">https://github.com/protocolbuffers/protobuf/releases\u003C/a>\u003C/li>\u003C/ol>\n\u003Cp>Then run a command like \u003Ccode>protoc —js_out=import_style=commonjs,binary:.\nmessages.proto base.proto\u003C/code>, you can get the \u003Ccode>.js\u003C/code> file from\u003C/p>\n\u003Ccode>.proto\u003C/code>.\n\u003Cp>When the \u003Ccode>.js\u003C/code> file generated, the protocol buffers environment is\nready.\u003C/p>\n\u003Cp>Back to our game, we should create a \u003Ccode>.proto\u003C/code> file, named\u003C/p>\n\u003Ccode>card-game.proto\u003C/code>.\n\u003Cp>The first line in \u003Ccode>.proto\u003C/code> file should be:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">syntax = &quot;proto3&quot;;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>which means which version of Protobuf we are using.\u003C/p>\n\u003Cp>Define the enum of Cmd:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">enum Cmd&#123;\n    NONE = 0;\n    READY_C2S = 1;\n    DEALCARDS_S2C = 2;\n    COMPETEFORLANDLORDROLE_C2S = 3;\n    PLAYTURN_S2C = 4;\n    PLAYCARDS_C2S = 5;\n    PLAYCARDS_S2C = 6;\n    ILLEGALCARDS_S2C = 7;\n    GAMEEND_S2C = 8;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>enum Cmd is for routing, will be introduced later.\u003C/p>\n\u003Cp>Define MainMessage message:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">message MainMessage&#123;\n    uint32 cmd_id = 1;\n    bytes data =2;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>In order to encapsulate the header and data body, we should assign serialized\nmessage to the data attribute.\u003C/p>\n\u003Cp>Define data message like:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">message DealCards_S2C&#123;\n    repeated uint32 cards = 1;\n    uint32 seat_number = 2;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>Then, generate our own \u003Ccode>.js\u003C/code> file.\u003C/p>\n\u003Cp>As the episode3 demo show, run command bellow in directory proto.\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>Windows\u003C/p>\n\u003Ccode>.\\protoc.exe --js_out=import_style=commonjs,binary:out\ncard-game.proto\u003C/code>\u003C/li>\n\u003Cli>\u003Cp>MacOS\u003C/p>\n\u003Ccode>./protoc --js_out=import_style=commonjs,binary:out\ncard-game.proto\u003C/code>\u003C/li>\u003C/ul>\n\u003Cp>Now, we have our own \u003Ccode>.js\u003C/code> file from the \u003Ccode>.proto\u003C/code> in which\nwe define message.\u003C/p>\n\u003Cp>Let’s encoding and decoding message with protocol buffers.\u003C/p>\n\u003Cp>Encoding: &gt;enum Cmd is used to map message type here\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">function encodeData(cmd, data) &#123;\n    let _proto_struct_obj;\n    switch (cmd) &#123;\n        case card_game_pb.Cmd.DEALCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.DealCards_S2C();\n            _proto_struct_obj.setCardsList(data.cards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.PLAYCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.PlayCards_S2C();\n            _proto_struct_obj.setCardsList(data.cards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.ILLEGALCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.IllegalCards_S2C();\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.GAMEEND_S2C:\n            _proto_struct_obj = new card_game_pb.GameEnd_S2C();\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.PLAYTURN_S2C:\n            _proto_struct_obj = new card_game_pb.PlayTurn_S2C();\n            _proto_struct_obj.setHandCardsList(data.handCards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        default:\n            console.log(&quot;no message matched.&quot;)\n    &#125;\n    if (_proto_struct_obj) &#123;\n        let _mainMsg = new card_game_pb.MainMessage();\n        _mainMsg.setCmdId(cmd);\n        let _data = _proto_struct_obj.serializeBinary();\n        _mainMsg.setData(_data);\n        let _completeData = _mainMsg.serializeBinary();\n        return _completeData;\n    &#125;\n    return null;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>Decoding: &gt;enum Cmd is used to map message type here\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">function decodeData(buffer) &#123;\n    let _mainMsg = card_game_pb.MainMessage.deserializeBinary(buffer);\n    let _cmd = _mainMsg.getCmdId();\n    let _bytesData = _mainMsg.getData();\n    let _data;\n    switch (_cmd) &#123;\n        case card_game_pb.Cmd.READY_C2S:\n            _data = card_game_pb.Ready_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.ready_C2S) _this.ready_C2S(_data);\n            break;\n        case card_game_pb.Cmd.PLAYCARDS_C2S:\n            _data = card_game_pb.PlayCards_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                cards: _data.getCardsList(),\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.playCards_C2S) _this.playCards_C2S(_data);\n            break;\n        case card_game_pb.Cmd.COMPETEFORLANDLORDROLE_C2S:\n            _data = card_game_pb.CompeteForLandLordRole_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                score: _data.getScore(),\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.competeForLandLordRole_C2S) _this.competeForLandLordRole_C2S(_data);\n            break;\n        default:\n            console.log(&quot;no message matched.&quot;)\n    &#125;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cblockquote>\u003Cp>Caution:\u003C/p>\n\u003Col>\u003Cli>Attributes defined as \u003Cstrong>seat_number\u003C/strong> in \u003Ccode>.proto\u003C/code> file should be\ncall like getSeatNumber and setSeatNumebr.\u003C/li>\n\u003Cli>Attributes defined as \u003Cstrong>repeated\u003C/strong> type in \u003Ccode>.proto\u003C/code> should call\ngetAttributeNameList and setAttributeList instead of the attribute self\nname.\u003C/li>\u003C/ol>\u003C/blockquote>","3 min read"],"uses":{"url":1}},null]}
