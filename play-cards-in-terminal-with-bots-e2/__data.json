{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"title":2,"slug":3,"coverImage":4,"date":5,"excerpt":6,"tags":7,"html":9,"readingTime":10,"relatedPosts":11},"Play cards in terminal with bots - Episode 2","play-cards-in-terminal-with-bots-e2","/images/posts/blog-posts.jpg","2021-02-08T21:55:15.361Z","Play cards in terminal with bots",[8],"Tutorial:Make a multiplayer card game","\u003Ch2 id=\"make-a-multiplayer-card-game---episode-2--play-cards-in-terminal-with-bots\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-2--play-cards-in-terminal-with-bots\">\u003Cspan>#\u003C/span>\u003C/a>Make a multiplayer card game - Episode 2 | Play cards in terminal with bots\u003C/h2>\n\u003Cblockquote>\u003Cp>Before the tech content, I can’t help but express my feeling after writing my\nfirst blog post.\u003C/p>\u003C/blockquote>\n\u003Cblockquote>\u003Cp>I have learned a lot from writing blog. I will never understand the benefits\ncontained in it before I wrote the first blog.\u003C/p>\u003C/blockquote>\n\u003Cblockquote>\u003Cp>The output of the content will prompt you to review the known knowledge. In\nthe process of reviewing the known knowledge, you will comprehend new\ncognition from the old knowledge by sorting out and summarizing the knowledge.\nIn order to make it easier for readers to understand, you will understand the\npreviously vague knowledge points by learning new knowledge.\u003C/p>\u003C/blockquote>\n\u003Cblockquote>\u003Cp>At the same time, I began to understand the author’s gratitude to his family\nin the preface of the book. Content output is a time-consuming and\nlabor-intensive thing that requires a high degree of concentration.\u003C/p>\u003C/blockquote>\n\u003Cblockquote>\u003Cp>If you are a developer and have not started your own blog writing, it is\nrecommended to start now, no matter the content is good or bad, take the first\nstep and feel the magical power of the output of the content.\u003C/p>\u003C/blockquote>\n\u003Cp>Based on the server and client we had create in the previous episode, we\nconcentrate on the logic of game process flow this time. For easy understanding,\nwe ignore some process such as calculating score which we will supplement in the\nmulti player version.\u003C/p>\n\u003Cp>First of all, have a look at the new directory structure:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1645975508993/Svw37SWa5.png\" alt=\"Screen Shot 2022-02-27 at 23.24.54.png\">\u003C/p>\n\u003Cp>As we can see above, we add a directory named share, which will be use by both\nclient and server.\u003C/p>\n\u003Ccode>helper.js for common logic.\u003C/code>\n\u003Ccode>proto.js for message definitions.\u003C/code>\n\u003Ccode>rule-checker.js for rule of our card game &quot;Doudizhu&quot;.\u003C/code>\n\u003Col>\u003Cli>Define messages between client and server.\u003C/li>\u003C/ol>\n\u003Cp>share/proto.js:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">function generateEnum(protoArr) &#123;\n    let _enum = &#123;&#125;;\n    for (let i = 0; i &lt; protoArr.length; i++) &#123;\n        const _protoName = protoArr[i];\n        const _cmdID = i;\n        _enum[_enum[_protoName] = _cmdID] = _protoName;\n    &#125;\n    return _enum;\n&#125;\n\nconst ENUM_CMD_FN = generateEnum(\n    [\n        &quot;ready_C2S&quot;,\n        &quot;dealCards_S2C&quot;,\n        &quot;competeForLandLordRole_C2S&quot;,\n        &quot;playTurn&quot;,\n        &quot;playCards_C2S&quot;,\n        &quot;playCards_S2C&quot;,\n        &quot;notAllowedByRule_S2C&quot;,\n        &quot;gameEnd_S2C&quot;\n    ]);\n\nmodule.exports = &#123; ENUM_CMD_FN: ENUM_CMD_FN &#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>The codes above create a enum like structure, which make the communication\nintuitive. We define the function in client and server with the same name\ncreated in it.\u003C/p>\n\u003Cp>We encode message by the cmdID. server/index.js:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">function encodeData(cmd, data)&#123;\n    let _header = Buffer.alloc(1);\n    _header.writeUInt8(cmd);\n    let _body = Buffer.from(JSON.stringify(data));\n    const _dataBuffer = Buffer.concat([_header, _body]);\n    return _dataBuffer;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>And decode message by cmdID to find the function to execute. server/index.js\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">function decodeData(data) &#123;\n    let _cmd = data.readUInt8();\n    let _body = JSON.parse(data.slice(1));\n    const _funcName = ENUM_CMD_FN[_cmd];\n    if (_funcName &amp;&amp; typeof _this[_funcName] == &quot;function&quot;) _this[_funcName](_body);\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cblockquote>\u003Cp>Caution: the function called through _this[_funcName] must be define as:\u003C/p>\u003C/blockquote>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">this.dealCards_S2C = function (data) &#123;\n    let _cards = data.cards;\n    mCardsArr = sortByValue(_cards);\n    let _myHandCardsShowArr = convert2ReadableNames(mCardsArr);\n    console.log(&#39;Deal cards complete, your seat number is-&gt; &#39;, data.seatNumber, &#39;your cards-&gt;&#39;, _myHandCardsShowArr.join(&#39;,&#39;));\n    console.log(&#39;Select a score to confirm role (you can input 1|2|3, the one who select the biggest number will be the land lord, and the base score is the selected number.): &#39;);\n    const _score = getInputFromCmd();\n    this.competeForLandLordRole_C2S(_score);\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cblockquote>\u003Cp>define like function dealCards_S2C(), can not be found.\u003C/p>\u003C/blockquote>\n\u003Cp>The key point of this episode is all above, other codes are all about the game\nprocess flow and rules which has introduce in my\n\u003Ca href=\"https://lizhiyu.me/prior-knowledge-for-episode-2\" rel=\"nofollow\">previous post\u003C/a>. If you has\ninterest in this game, please clone the demo and play with the bots.\u003C/p>\n\u003Cp>The complete demo can be found on:\n\u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode2\" rel=\"nofollow\">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode2\u003C/a>\u003C/p>\n\u003Cp>Any problems, discussion is welcome.\u003C/p>\n\u003Cp>\u003Cstrong>In the next episode, we will add the\n\u003Ca href=\"https://github.com/protocolbuffers/protobuf\" rel=\"nofollow\">protobuf.js\u003C/a> which is most popular\nin game development to define our messages between client and server.\u003C/strong>\u003C/p>\n\u003Cp>Thanks for your reading.\u003C/p>","3 min read",[12,19,27],{"title":13,"slug":14,"coverImage":4,"date":15,"excerpt":16,"tags":17,"html":18,"readingTime":10},"Make a multiplayer card game - Episode 3","change-json-to-protocol-buffers-e3","2021-02-22T21:55:15.361Z","Change JSON to Protocol Buffers",[8],"\u003Ch2 id=\"make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-3--change-json-to-protocol-buffers\">\u003Cspan>#\u003C/span>\u003C/a>Make a multiplayer card game - Episode 3 | Change JSON to Protocol Buffers\u003C/h2>\n\u003Cblockquote>\u003Cp>Protocol buffers are a language-neutral, platform-neutral extensible mechanism\nfor serializing structured data. It has many advantages such as “Lesser in\nSize and Better in Performance”, like this article\n\u003Ca href=\"https://anuragthakur.hashnode.dev/protobuf-why-google-moved-from-json-to-protocol-buffers-ckdxb8sgi03kdjas17ril3fbi\" rel=\"nofollow\">Why Google moved from JSON to Protocol Buffers?\u003C/a>\nintroduce.\u003C/p>\u003C/blockquote>\n\u003Cp>I used it on all the projects I’ve worked on over the years. Besides the better\nperformance, what make me impressed is that the clean communication between\nclient and server with protocol buffers.\u003C/p>\n\u003Cblockquote>\u003Cp>You can clone\n\u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode3\" rel=\"nofollow\">demo for episode3\u003C/a>\nwhich including all the bellow content.\u003C/p>\u003C/blockquote>\n\u003Cp>According to the\n\u003Ca href=\"https://github.com/protocolbuffers/protobuf\" rel=\"nofollow\">official tutorial\u003C/a>, two steps\nshould be done:\u003C/p>\n\u003Col>\u003Cli>Install the runtime library \u003Ccode>google-protobuf\u003C/code>:\u003Ccode>npm install\ngoogle-protobuf\u003C/code>.\u003C/li>\n\u003Cli>Get the Protocol Compiler \u003Ccode>protoc\u003C/code>: download from\n\u003Ca href=\"https://github.com/protocolbuffers/protobuf/releases\" rel=\"nofollow\">https://github.com/protocolbuffers/protobuf/releases\u003C/a>\u003C/li>\u003C/ol>\n\u003Cp>Then run a command like \u003Ccode>protoc —js_out=import_style=commonjs,binary:.\nmessages.proto base.proto\u003C/code>, you can get the \u003Ccode>.js\u003C/code> file from\u003C/p>\n\u003Ccode>.proto\u003C/code>.\n\u003Cp>When the \u003Ccode>.js\u003C/code> file generated, the protocol buffers environment is\nready.\u003C/p>\n\u003Cp>Back to our game, we should create a \u003Ccode>.proto\u003C/code> file, named\u003C/p>\n\u003Ccode>card-game.proto\u003C/code>.\n\u003Cp>The first line in \u003Ccode>.proto\u003C/code> file should be:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">syntax = &quot;proto3&quot;;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>which means which version of Protobuf we are using.\u003C/p>\n\u003Cp>Define the enum of Cmd:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">enum Cmd&#123;\n    NONE = 0;\n    READY_C2S = 1;\n    DEALCARDS_S2C = 2;\n    COMPETEFORLANDLORDROLE_C2S = 3;\n    PLAYTURN_S2C = 4;\n    PLAYCARDS_C2S = 5;\n    PLAYCARDS_S2C = 6;\n    ILLEGALCARDS_S2C = 7;\n    GAMEEND_S2C = 8;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>enum Cmd is for routing, will be introduced later.\u003C/p>\n\u003Cp>Define MainMessage message:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">message MainMessage&#123;\n    uint32 cmd_id = 1;\n    bytes data =2;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>In order to encapsulate the header and data body, we should assign serialized\nmessage to the data attribute.\u003C/p>\n\u003Cp>Define data message like:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">message DealCards_S2C&#123;\n    repeated uint32 cards = 1;\n    uint32 seat_number = 2;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>Then, generate our own \u003Ccode>.js\u003C/code> file.\u003C/p>\n\u003Cp>As the episode3 demo show, run command bellow in directory proto.\u003C/p>\n\u003Cul>\u003Cli>\u003Cp>Windows\u003C/p>\n\u003Ccode>.\\protoc.exe --js_out=import_style=commonjs,binary:out\ncard-game.proto\u003C/code>\u003C/li>\n\u003Cli>\u003Cp>MacOS\u003C/p>\n\u003Ccode>./protoc --js_out=import_style=commonjs,binary:out\ncard-game.proto\u003C/code>\u003C/li>\u003C/ul>\n\u003Cp>Now, we have our own \u003Ccode>.js\u003C/code> file from the \u003Ccode>.proto\u003C/code> in which\nwe define message.\u003C/p>\n\u003Cp>Let’s encoding and decoding message with protocol buffers.\u003C/p>\n\u003Cp>Encoding: &gt;enum Cmd is used to map message type here\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">function encodeData(cmd, data) &#123;\n    let _proto_struct_obj;\n    switch (cmd) &#123;\n        case card_game_pb.Cmd.DEALCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.DealCards_S2C();\n            _proto_struct_obj.setCardsList(data.cards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.PLAYCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.PlayCards_S2C();\n            _proto_struct_obj.setCardsList(data.cards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.ILLEGALCARDS_S2C:\n            _proto_struct_obj = new card_game_pb.IllegalCards_S2C();\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.GAMEEND_S2C:\n            _proto_struct_obj = new card_game_pb.GameEnd_S2C();\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        case card_game_pb.Cmd.PLAYTURN_S2C:\n            _proto_struct_obj = new card_game_pb.PlayTurn_S2C();\n            _proto_struct_obj.setHandCardsList(data.handCards);\n            _proto_struct_obj.setSeatNumber(data.seatNumber);\n            break;\n        default:\n            console.log(&quot;no message matched.&quot;)\n    &#125;\n    if (_proto_struct_obj) &#123;\n        let _mainMsg = new card_game_pb.MainMessage();\n        _mainMsg.setCmdId(cmd);\n        let _data = _proto_struct_obj.serializeBinary();\n        _mainMsg.setData(_data);\n        let _completeData = _mainMsg.serializeBinary();\n        return _completeData;\n    &#125;\n    return null;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>Decoding: &gt;enum Cmd is used to map message type here\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">function decodeData(buffer) &#123;\n    let _mainMsg = card_game_pb.MainMessage.deserializeBinary(buffer);\n    let _cmd = _mainMsg.getCmdId();\n    let _bytesData = _mainMsg.getData();\n    let _data;\n    switch (_cmd) &#123;\n        case card_game_pb.Cmd.READY_C2S:\n            _data = card_game_pb.Ready_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.ready_C2S) _this.ready_C2S(_data);\n            break;\n        case card_game_pb.Cmd.PLAYCARDS_C2S:\n            _data = card_game_pb.PlayCards_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                cards: _data.getCardsList(),\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.playCards_C2S) _this.playCards_C2S(_data);\n            break;\n        case card_game_pb.Cmd.COMPETEFORLANDLORDROLE_C2S:\n            _data = card_game_pb.CompeteForLandLordRole_C2S.deserializeBinary(_bytesData);\n            _data = &#123;\n                score: _data.getScore(),\n                seatNumber: _data.getSeatNumber()\n            &#125;\n            if (_this.competeForLandLordRole_C2S) _this.competeForLandLordRole_C2S(_data);\n            break;\n        default:\n            console.log(&quot;no message matched.&quot;)\n    &#125;\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cblockquote>\u003Cp>Caution:\u003C/p>\n\u003Col>\u003Cli>Attributes defined as \u003Cstrong>seat_number\u003C/strong> in \u003Ccode>.proto\u003C/code> file should be\ncall like getSeatNumber and setSeatNumebr.\u003C/li>\n\u003Cli>Attributes defined as \u003Cstrong>repeated\u003C/strong> type in \u003Ccode>.proto\u003C/code> should call\ngetAttributeNameList and setAttributeList instead of the attribute self\nname.\u003C/li>\u003C/ol>\u003C/blockquote>",{"title":20,"slug":21,"coverImage":4,"date":22,"excerpt":23,"tags":24,"html":25,"readingTime":26},"Make a multiplayer card game - Episode 6 | Create 2D graphical interface with React","create-2d-graphical-interface-with-react-e6","2021-03-29T21:55:15.361Z","This section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api.",[8],"\u003Ch2 id=\"make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-6--create-2d-graphical-interface-with-react\">\u003Cspan>#\u003C/span>\u003C/a>Make a multiplayer card game - Episode 6 | Create 2D graphical interface with React\u003C/h2>\n\u003Cp>This section mainly uses react to implement UI views. Before this section, a UI view version has been implemented with cocos creator. In order to reuse the basic framework, we abstract the game logic and decouple the logic related to the view engine api. The following is an abstracted interface:\u003C/p>\n\u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">export interface IGameSceneView &#123;\n    getViewComponent(name: string),\n    getNewViewComponent(comp),\n    getChild(childPath, parent),\n    addClickListener(comp, handler, target),\n    setCard(card, name),\n    setLabel(labelComp, text),\n    removeAllChildren(parent),\n    addChild(child, parent),\n    isCardSelected(card),\n    toggleCardSelectedStatus(card),\n    showComponent(comp),\n    hideComponent(comp)\n&#125;\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>Compared with cocos creator, the implementation of react is more operable at the code level. The styles of interface elements are all implemented by handwritten code. The hot-reload that comes with create-react-app also responds to changes very quickly. There is a time to switch editors and wait for the editor to refresh, which is very lightweight.\u003C/p>\n\u003Cp>Code reference \u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\" rel=\"nofollow\">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\u003C/a>\u003C/p>\n\u003Cp>The next article mainly introduces the comparison between cocos creator and react implementation in development.\u003C/p>\n\u003Cp>本节主要是用react实现UI视图。\n在本节之前，已经用cocos creator实现了一个UI视图版本，为了重用基础框架，我们将游戏逻辑进行抽象，并将与视图引擎api相关的逻辑解耦出来。\n下面是抽象出来的一个接口：\u003C/p>\n\u003Cpre class=\"language-typescript\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-typescript\">\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">IGameSceneView\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token function\">getViewComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">getNewViewComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">getChild\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>childPath\u003Cspan class=\"token punctuation\">,\u003C/span> parent\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">addClickListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">,\u003C/span> handler\u003Cspan class=\"token punctuation\">,\u003C/span> target\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">setCard\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>card\u003Cspan class=\"token punctuation\">,\u003C/span> name\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">setLabel\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>labelComp\u003Cspan class=\"token punctuation\">,\u003C/span> text\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">removeAllChildren\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>parent\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">addChild\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>child\u003Cspan class=\"token punctuation\">,\u003C/span> parent\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">isCardSelected\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>card\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">toggleCardSelectedStatus\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>card\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">showComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">hideComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>comp\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>相对于cocos creator，react的实现在代码层面可操作性较强，体现在界面元素的样式都通过手写代码来实现，create-react-app自带的hot-reload也非常快地反馈变更，不会有切换编辑器和等待编辑器刷新的时间，非常轻量的感觉。\u003C/p>\n\u003Cp>代码参考 \u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\" rel=\"nofollow\">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode6-react\u003C/a>\u003C/p>\n\u003Cp>下一篇主要介绍cocos creator 与 react 实现在开发上的对比。\u003C/p>","2 min read",{"title":28,"slug":29,"coverImage":4,"date":30,"excerpt":31,"tags":32,"html":33,"readingTime":26},"Make a multiplayer card game - Episode 1","create-a-simple-server-and-client-from-scratch-e1","2021-02-01T21:55:15.361Z","Create a simple server and client from scratch",[8],"\u003Ch2 id=\"make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch\">\u003Ca class=\"heading-link\" title=\"Permalink\" aria-hidden=\"true\" href=\"#make-a-multiplayer-card-game---episode-1--create-a-simple-server-and-client-from-scratch\">\u003Cspan>#\u003C/span>\u003C/a>Make a multiplayer card game - Episode 1 | Create a simple server and client from scratch\u003C/h2>\n\u003Cp>In the coming weeks, I’ll be updating a series of tutorials on making a\nmultiplayer online card games base on the rule of the most popular Chinese card\ngame “Doudizhu”, which means battle with landlord. I divide this series in many\nsmall part to make it easy for most friends. If you know a little javascript,\nall the better.\u003C/p>\n\u003Cp>Parts including:\u003C/p>\n\u003Cul>\u003Cli>create a simple server and client\u003C/li>\n\u003Cli>play cards in terminal with bots\u003C/li>\n\u003Cli>communicate with server by protobuf\u003C/li>\n\u003Cli>play cards in terminal with other players\u003C/li>\n\u003Cli>create 2D graphical interface with Cocos Creator\u003C/li>\n\u003Cli>create 2D graphical interface with React\u003C/li>\n\u003Cli>create 3D graphical interface with Three.js\u003C/li>\n\u003Cli>add physical lib ammo.js to add a tiny game\u003C/li>\n\u003Cli>connect to Web3 world\u003C/li>\u003C/ul>\n\u003Cp>\u003Cem>open your terminal, input \u003Ccode>node -v\u003C/code>, if something go wrong, please install\nnode.js first \u003Ca href=\"Link\">https://nodejs.org\u003C/a>.\u003C/em>\u003C/p>\n\u003Cp>directory structure :\n\u003Cimg src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1644775769474/2OAtz4Ljw.jpeg\" alt=\"demo0-document-tree.jpg\">\u003C/p>\n\u003Cp>create a server, server/index.js:\u003C/p>\n\u003Cdiv class=\"code-block svelte-1pkpsrg\">\n\t\n\t\u003Cpre class=\"language-ts\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-ts\">\u003Cspan class=\"token keyword\">const\u003C/span> net \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">require\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"net\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> server \u003Cspan class=\"token operator\">=\u003C/span> net\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">createServer\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>socket\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  socket\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">on\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"data\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token function\">handlerData\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>socket\u003Cspan class=\"token punctuation\">,\u003C/span> data\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">handlerData\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>socket\u003Cspan class=\"token punctuation\">,\u003C/span> data\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token function\">send\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>socket\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span> \u003Cspan class=\"token string-property property\">\"msg\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"Welcome, friend.\"\u003C/span> \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">send\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>socket\u003Cspan class=\"token punctuation\">,\u003C/span> data\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token keyword\">let\u003C/span> bufferData \u003Cspan class=\"token operator\">=\u003C/span> Buffer\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">from\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token constant\">JSON\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">stringify\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  socket\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">write\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>bufferData\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\nserver\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">listen\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">8080\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"server listening on 127.0.0.1:8080\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003C/div>\n\u003Cp>create client, client/index.js:\u003C/p>\n\u003Cdiv class=\"code-block svelte-1pkpsrg\">\n\t\n\t\u003Cpre class=\"language-ts\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-ts\">\u003Cspan class=\"token keyword\">const\u003C/span> net \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">require\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"net\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> socket \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">net\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Socket\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\nsocket\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">connect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  host\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"127.0.0.1\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  port\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">8080\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> onConnected\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\nsocket\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">on\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"data\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>buffer\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token function\">decode\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>buffer\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nsocket\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">on\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"error\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>buffer\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>buffer\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">onConnected\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token function\">startGame\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">decode\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token constant\">JSON\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">parse\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>msg\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">request\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> bufferData \u003Cspan class=\"token operator\">=\u003C/span> Buffer\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">from\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token constant\">JSON\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">stringify\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span> \u003Cspan class=\"token string-property property\">\"msg\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> data \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  socket\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">write\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>bufferData\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">startGame\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token function\">request\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"Hello, world!\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003C/div>\n\u003Cp>run :\u003C/p>\n\u003Cp>\u003Ccode>cd server\u003C/code>\u003C/p>\n\u003Cp>\u003Ccode>node index.js\u003C/code>\u003C/p>\n\u003Cp>\u003Ccode>cd client\u003C/code>\u003C/p>\n\u003Cp>\u003Ccode>node index.js\u003C/code>\u003C/p>\n\u003Cp>result:\u003C/p>\n\u003Cp>\u003Cimg src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1644776034549/t-Jir1j9R.png\" alt=\"demo0-cmd-result.png\">\u003C/p>\n\u003Cp>This episode is end here, the complete demo can be found on\n\u003Ca href=\"https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode1\" rel=\"nofollow\">https://github.com/lizhiyu-me/Make-a-multiplayer-card-game/tree/episode1\u003C/a>\u003C/p>\n\u003Cp>Any problems, discussion is welcome.\u003C/p>\n\u003Cp>\u003Cstrong>In the next section, we will add the logic of Doudizhu game, and you will have\ncompleted a playable game in your terminal. \u003C/strong>\u003C/p>\n\u003Cp>Thanks for your reading.\u003C/p>"],"uses":{"url":1}},null]}
